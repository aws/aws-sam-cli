package cloudformation

{{if not .IsCustomProperty}}
import (
	"encoding/json"
	"fmt"
	"errors"
)
{{end}}
// {{.StructName}} AWS CloudFormation Resource ({{.Name}})
// See: {{.Resource.Documentation}}
type {{.StructName}} struct {
    {{range $name, $property := .Resource.Properties}}
    // {{$name}} AWS CloudFormation Property
    // Required: {{$property.Required}}
    // See: {{$property.Documentation}}
    {{$name}} {{if (or ($property.IsPolymorphic) ($property.IsCustomType) )}}*{{end}}{{$property.GoType $.Basename}} `json:"{{$name}},omitempty"`
    {{end}}
}

// AWSCloudFormationType returns the AWS CloudFormation resource type
func (r *{{.StructName}}) AWSCloudFormationType() string {
    return "{{.Name}}"
}

// AWSCloudFormationSpecificationVersion returns the AWS Specification Version that this resource was generated from
func (r *{{.StructName}}) AWSCloudFormationSpecificationVersion() string {
    return "{{.Version}}"
}
{{if not .IsCustomProperty}}
// MarshalJSON is a custom JSON marshalling hook that embeds this object into 
// an AWS CloudFormation JSON resource's 'Properties' field and adds a 'Type'.
func (r *{{.StructName}}) MarshalJSON() ([]byte, error) {
	type Properties {{.StructName}}
	return json.Marshal(&struct{
		Type string
		{{if .IsCustomProperty}}Properties{{else}}Properties Properties{{end}}
	}{
		Type: r.AWSCloudFormationType(),
		Properties: (Properties)(*r),
	})
}

// UnmarshalJSON is a custom JSON unmarshalling hook that strips the outer
// AWS CloudFormation resource object, and just keeps the 'Properties' field.
func (r *{{.StructName}}) UnmarshalJSON(b []byte) error {
	type Properties {{.StructName}}
	res := &struct {
		Type string
		{{if .IsCustomProperty}}Properties{{else}}Properties *Properties{{end}}
	}{}
	if err := json.Unmarshal(b, &res); err != nil {
		fmt.Printf("ERROR: %s\n", err)
		return err
	}
	*r = {{.StructName}}(*res.Properties)
	return nil	
}

// GetAll{{.StructName}}Resources retrieves all {{.StructName}} items from an AWS CloudFormation template
func (t *Template) GetAll{{.StructName}}Resources () map[string]{{.StructName}} {
    results := map[string]{{.StructName}}{}
	for name, untyped := range t.Resources {
		switch resource := untyped.(type) {
		case {{.StructName}}:
			// We found a strongly typed resource of the correct type; use it
			results[name] = resource
		case map[string]interface{}:
			// We found an untyped resource (likely from JSON) which *might* be
			// the correct type, but we need to check it's 'Type' field
			if resType, ok := resource["Type"]; ok {
				if resType == "{{.Name}}" {
					// The resource is correct, unmarshal it into the results
					if b, err := json.Marshal(resource); err == nil {
						var result {{.StructName}}
						if err := json.Unmarshal(b, &result); err == nil {
							results[name] = result
						}
					}
				}
			}
		}
	}
	return results
}

// Get{{.StructName}}WithName retrieves all {{.StructName}} items from an AWS CloudFormation template
// whose logical ID matches the provided name. Returns an error if not found.
func (t *Template) Get{{.StructName}}WithName (name string) ({{.StructName}}, error) {
	if untyped, ok := t.Resources[name]; ok {		
		switch resource := untyped.(type) {
		case {{.StructName}}:
			// We found a strongly typed resource of the correct type; use it
			return resource, nil
		case map[string]interface{}:
			// We found an untyped resource (likely from JSON) which *might* be
			// the correct type, but we need to check it's 'Type' field
			if resType, ok := resource["Type"]; ok {
				if resType == "{{.Name}}" {
					// The resource is correct, unmarshal it into the results
					if b, err := json.Marshal(resource); err == nil {
						var result {{.StructName}}
						if err := json.Unmarshal(b, &result); err == nil {
							return result, nil
						}
					}
				}
			}	
		}
	}
    return {{.StructName}}{}, errors.New("resource not found")
}
{{end}}