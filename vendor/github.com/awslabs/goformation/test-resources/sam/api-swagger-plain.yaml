AWSTemplateFormatVersion: "2010-09-09"
Description: "Swagger demo for Integration Requests"
Outputs: 
  NotifyUrl: 
    Description: "Notify Workflow URL"
    Value: "https://${StepFunctionsAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/notify"
  StepFunctionsStateMachine: 
    Description: "Step Functions State Machine ARN"
    Value: StepFunctionStateMachine
Parameters: 
  NotificationEmail: 
    Description: "Email address to subscribe to SNS topic and receive notifications from Notifier Workflow"
    Type: String
  SlackToken: 
    Default: None
    Description: "Legacy Slack Token (xoxp-ywz) to send messages on channel"
    Type: String
Resources: 
  AnotherRandomAPI: 
    Properties: 
      DefinitionBody: 
        basePath: /v2
        definitions: 
          ApiResponse: 
            properties: 
              code: 
                format: int32
                type: integer
              message: 
                type: string
              type: 
                type: string
            xml: 
              name: "##default"
          Category: 
            properties: 
              id: 
                format: int64
                type: integer
              name: 
                type: string
            xml: 
              name: Category
          Order: 
            properties: 
              complete: 
                type: boolean
              id: 
                format: int64
                type: integer
              petId: 
                format: int64
                type: integer
              quantity: 
                format: int32
                type: integer
              shipDate: 
                format: date-time
                type: string
              status: 
                description: "Order Status"
                enum: 
                  - placed
                  - approved
                  - delivered
                type: string
            xml: 
              name: Order
          Pet: 
            properties: 
              category: 
                $ref: "#/definitions/Category"
              id: 
                format: int64
                type: integer
              name: 
                example: doggie
                type: string
              photoUrls: 
                items: 
                  type: string
                type: array
                xml: 
                  name: photoUrl
                  wrapped: true
              status: 
                description: "pet status in the store"
                enum: 
                  - available
                  - pending
                  - sold
                type: string
              tags: 
                items: 
                  $ref: "#/definitions/Tag"
                type: array
                xml: 
                  name: tag
                  wrapped: true
            required: 
              - name
              - photoUrls
            xml: 
              name: Pet
          Tag: 
            properties: 
              id: 
                format: int64
                type: integer
              name: 
                type: string
            xml: 
              name: Tag
          User: 
            properties: 
              email: 
                type: string
              firstName: 
                type: string
              id: 
                format: int64
                type: integer
              lastName: 
                type: string
              password: 
                type: string
              phone: 
                type: string
              userStatus: 
                description: "User Status"
                format: int32
                type: integer
              username: 
                type: string
            xml: 
              name: User
        externalDocs: 
          description: "Find out more about Swagger"
          url: "http://swagger.io"
        info: 
          contact: 
            email: apiteam@swagger.io
          description: "This is a sample server Petstore server.  You can find out more about Swagger at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \"special-key\" to test the authorization filters"
          license: 
            name: "Apache 2.0"
            url: "http://www.apache.org/licenses/LICENSE-2.0.html"
          termsOfService: "http://swagger.io/terms/"
          title: "Swagger Petstore YAML"
          version: "1.0.0"
        paths: 
          /pet: 
            post: 
              consumes: 
                - application/json
                - application/xml
              description: ""
              operationId: addPet
              parameters: 
                - 
                  description: "Pet object that needs to be added to the store"
                  in: body
                  name: body
                  required: false
                  schema: 
                    $ref: "#/definitions/Pet"
              produces: 
                - application/xml
                - application/json
              responses: 
                "405": 
                  description: "Invalid input"
              security: 
                - 
                  petstore_auth: 
                    - "write:pets"
                    - "read:pets"
              summary: "Add a new pet to the store"
              tags: 
                - pet
              x-swagger-router-controller: SampleController
            put: 
              consumes: 
                - application/json
                - application/xml
              description: ""
              operationId: updatePet
              parameters: 
                - 
                  description: "Pet object that needs to be added to the store"
                  in: body
                  name: body
                  required: false
                  schema: 
                    $ref: "#/definitions/Pet"
              produces: 
                - application/xml
                - application/json
              responses: 
                "400": 
                  description: "Invalid ID supplied"
                "404": 
                  description: "Pet not found"
                "405": 
                  description: "Validation exception"
              security: 
                - 
                  petstore_auth: 
                    - "write:pets"
                    - "read:pets"
              summary: "Update an existing pet"
              tags: 
                - pet
          /pet/findByStatus: 
            get: 
              consumes: 
                - application/xml
                - application/json
                - multipart/form-data
                - application/x-www-form-urlencoded
              description: "Multiple status values can be provided with comma seperated strings"
              operationId: findPetsByStatus
              parameters: 
                - 
                  collectionFormat: multi
                  default: available
                  description: "Status values that need to be considered for filter"
                  enum: 
                    - available
                    - pending
                    - sold
                  in: query
                  items: 
                    type: string
                  name: status
                  required: false
                  type: array
                - 
                  collectionFormat: multi
                  default: available
                  description: "Status values that need to be considered for filter"
                  enum: 
                    - 1234567890123456
                    - 345
                    - 678
                  in: query
                  items: 
                    type: long
                  name: testlong
                  required: false
                  type: array
              produces: 
                - application/xml
                - application/json
              responses: 
                "200": 
                  description: "successful operation"
                  schema: 
                    items: 
                      $ref: "#/definitions/Pet"
                    type: array
                "400": 
                  description: "Invalid status value"
              security: 
                - 
                  petstore_auth: 
                    - "write:pets"
                    - "read:pets"
              summary: "Finds Pets by status"
              tags: 
                - pet
          /pet/findByTags: 
            get: 
              description: "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing."
              operationId: findPetsByTags
              parameters: 
                - 
                  collectionFormat: multi
                  description: "Tags to filter by"
                  in: query
                  items: 
                    type: string
                  name: tags
                  required: false
                  type: array
              produces: 
                - application/xml
                - application/json
              responses: 
                "200": 
                  description: "successful operation"
                  schema: 
                    items: 
                      $ref: "#/definitions/Pet"
                    type: array
                "400": 
                  description: "Invalid tag value"
              security: 
                - 
                  petstore_auth: 
                    - "write:pets"
                    - "read:pets"
              summary: "Finds Pets by tags"
              tags: 
                - pet
          ? "/pet/{petId}"
          : 
            delete: 
              consumes: 
                - multipart/form-data
                - application/x-www-form-urlencoded
              description: ""
              operationId: deletePet
              parameters: 
                - 
                  description: ""
                  in: header
                  name: api_key
                  required: false
                  type: string
                - 
                  description: "Pet id to delete"
                  format: int64
                  in: path
                  name: petId
                  required: true
                  type: integer
              produces: 
                - application/xml
                - application/json
              responses: 
                "400": 
                  description: "Invalid pet value"
              security: 
                - 
                  petstore_auth: 
                    - "write:pets"
                    - "read:pets"
              summary: "Deletes a pet"
              tags: 
                - pet
            get: 
              consumes: 
                - application/x-www-form-urlencoded
              description: "Returns a single pet"
              operationId: getPetById
              parameters: 
                - 
                  description: "ID of pet to return"
                  format: int64
                  in: path
                  name: petId
                  required: true
                  type: integer
              produces: 
                - application/xml
                - application/json
              responses: 
                "200": 
                  description: "successful operation"
                  schema: 
                    $ref: "#/definitions/Pet"
                "400": 
                  description: "Invalid ID supplied"
                "404": 
                  description: "Pet not found"
              security: 
                - 
                  api_key: []
                - 
                  petstore_auth: 
                    - "write:pets"
                    - "read:pets"
              summary: "Find pet by ID"
              tags: 
                - pet
            post: 
              consumes: 
                - application/x-www-form-urlencoded
              description: ""
              operationId: updatePetWithForm
              parameters: 
                - 
                  description: "ID of pet that needs to be updated"
                  in: path
                  name: petId
                  required: true
                  type: string
                - 
                  description: "Updated name of the pet"
                  in: formData
                  name: name
                  required: false
                  type: string
                - 
                  description: "Updated status of the pet"
                  in: formData
                  name: status
                  required: false
                  type: string
              produces: 
                - application/xml
                - application/json
              responses: 
                "405": 
                  description: "Invalid input"
              security: 
                - 
                  petstore_auth: 
                    - "write:pets"
                    - "read:pets"
              summary: "Updates a pet in the store with form data"
              tags: 
                - pet
          ? "/pet/{petId}/uploadImage"
          : 
            post: 
              consumes: 
                - multipart/form-data
              description: ""
              operationId: uploadFile
              parameters: 
                - 
                  description: "ID of pet to update"
                  format: int64
                  in: path
                  name: petId
                  required: true
                  type: integer
                - 
                  description: "Additional data to pass to server"
                  in: formData
                  name: additionalMetadata
                  required: false
                  type: string
                - 
                  description: "file to upload"
                  in: formData
                  name: file
                  required: false
                  type: file
              produces: 
                - application/json
              responses: 
                "200": 
                  description: "successful operation"
                  schema: 
                    $ref: "#/definitions/ApiResponse"
              security: 
                - 
                  petstore_auth: 
                    - "write:pets"
                    - "read:pets"
              summary: "uploads an image"
              tags: 
                - pet
              x-swagger-router-controller: SampleController
          /store/inventory: 
            get: 
              description: "Returns a map of status codes to quantities"
              operationId: getInventory
              parameters: []
              produces: 
                - application/json
              responses: 
                "200": 
                  description: "successful operation"
                  schema: 
                    additionalProperties: 
                      format: int32
                      type: integer
                    type: object
              security: 
                - 
                  api_key: []
              summary: "Returns pet inventories by status"
              tags: 
                - store
          /store/order: 
            post: 
              description: ""
              operationId: placeOrder
              parameters: 
                - 
                  description: "order placed for purchasing the pet"
                  in: body
                  name: body
                  required: false
                  schema: 
                    $ref: "#/definitions/Order"
              produces: 
                - application/xml
                - application/json
              responses: 
                "200": 
                  description: "successful operation"
                  schema: 
                    $ref: "#/definitions/Order"
                "400": 
                  description: "Invalid Order"
              summary: "Place an order for a pet"
              tags: 
                - store
          ? "/store/order/{orderId}"
          : 
            delete: 
              description: "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors"
              operationId: deleteOrder
              parameters: 
                - 
                  description: "ID of the order that needs to be deleted"
                  in: path
                  name: orderId
                  required: true
                  type: string
              produces: 
                - application/xml
                - application/json
              responses: 
                "400": 
                  description: "Invalid ID supplied"
                "404": 
                  description: "Order not found"
              summary: "Delete purchase order by ID"
              tags: 
                - store
            get: 
              description: "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions"
              operationId: getOrderById
              parameters: 
                - 
                  description: "ID of pet that needs to be fetched"
                  in: path
                  name: orderId
                  required: true
                  type: string
              produces: 
                - application/xml
                - application/json
              responses: 
                "200": 
                  description: "successful operation"
                  schema: 
                    $ref: "#/definitions/Order"
                "400": 
                  description: "Invalid ID supplied"
                "404": 
                  description: "Order not found"
              summary: "Find purchase order by ID"
              tags: 
                - store
          /user: 
            post: 
              description: "This can only be done by the logged in user."
              operationId: createUser
              parameters: 
                - 
                  description: "Created user object"
                  in: body
                  name: body
                  required: false
                  schema: 
                    $ref: "#/definitions/User"
              produces: 
                - application/xml
                - application/json
              responses: 
                default: 
                  description: "successful operation"
              summary: "Create user"
              tags: 
                - user
          /user/createWithArray: 
            post: 
              description: ""
              operationId: createUsersWithArrayInput
              parameters: 
                - 
                  description: "List of user object"
                  in: body
                  name: body
                  required: false
                  schema: 
                    items: 
                      $ref: "#/definitions/User"
                    type: array
              produces: 
                - application/xml
                - application/json
              responses: 
                default: 
                  description: "successful operation"
              summary: "Creates list of users with given input array"
              tags: 
                - user
          /user/createWithList: 
            post: 
              description: ""
              operationId: createUsersWithListInput
              parameters: 
                - 
                  description: "List of user object"
                  in: body
                  name: body
                  required: false
                  schema: 
                    items: 
                      $ref: "#/definitions/User"
                    type: array
              produces: 
                - application/xml
                - application/json
              responses: 
                default: 
                  description: "successful operation"
              summary: "Creates list of users with given input array"
              tags: 
                - user
          /user/login: 
            get: 
              description: ""
              operationId: loginUser
              parameters: 
                - 
                  description: "The user name for login"
                  in: query
                  name: username
                  required: false
                  type: string
                - 
                  description: "The password for login in clear text"
                  in: query
                  name: password
                  required: false
                  type: string
              produces: 
                - application/xml
                - application/json
              responses: 
                "200": 
                  description: "successful operation"
                  headers: 
                    X-Expires-After: 
                      description: "date in UTC when toekn expires"
                      format: date-time
                      type: string
                    X-Rate-Limit: 
                      description: "calls per hour allowed by the user"
                      format: int32
                      type: integer
                  schema: 
                    type: string
                "400": 
                  description: "Invalid username/password supplied"
              summary: "Logs user into the system"
              tags: 
                - user
          /user/logout: 
            get: 
              description: ""
              operationId: logoutUser
              parameters: []
              produces: 
                - application/xml
                - application/json
              responses: 
                default: 
                  description: "successful operation"
              summary: "Logs out current logged in user session"
              tags: 
                - user
          ? "/user/{username}"
          : 
            delete: 
              description: "This can only be done by the logged in user."
              operationId: deleteUser
              parameters: 
                - 
                  description: "The name that needs to be deleted"
                  in: path
                  name: username
                  required: true
                  type: string
              produces: 
                - application/xml
                - application/json
              responses: 
                "400": 
                  description: "Invalid username supplied"
                "404": 
                  description: "User not found"
              summary: "Delete user"
              tags: 
                - user
            get: 
              description: ""
              operationId: getUserByName
              parameters: 
                - 
                  description: "The name that needs to be fetched. Use user1 for testing. "
                  in: path
                  name: username
                  required: true
                  type: string
              produces: 
                - application/xml
                - application/json
              responses: 
                "200": 
                  description: "successful operation"
                  schema: 
                    $ref: "#/definitions/User"
                "400": 
                  description: "Invalid username supplied"
                "404": 
                  description: "User not found"
              summary: "Get user by user name"
              tags: 
                - user
            put: 
              description: "This can only be done by the logged in user."
              operationId: updateUser
              parameters: 
                - 
                  description: "name that need to be deleted"
                  in: path
                  name: username
                  required: true
                  type: string
                - 
                  description: "Updated user object"
                  in: body
                  name: body
                  required: false
                  schema: 
                    $ref: "#/definitions/User"
              produces: 
                - application/xml
                - application/json
              responses: 
                "400": 
                  description: "Invalid user supplied"
                "404": 
                  description: "User not found"
              summary: "Updated user"
              tags: 
                - user
        schemes: 
          - http
        securityDefinitions: 
          api_key: 
            in: header
            name: api_key
            type: apiKey
          petstore_auth: 
            authorizationUrl: "http://petstore.swagger.io/api/oauth/dialog"
            flow: implicit
            scopes: 
              ? "read:pets"
              : "read your pets"
              ? "write:pets"
              : "modify pets in your account"
            type: oauth2
        swagger: "2.0"
        tags: 
          - 
            description: "Everything about your Pets"
            externalDocs: 
              description: "Find out more"
              url: "http://swagger.io"
            name: pet
          - 
            description: "Operations about user"
            name: store
          - 
            description: "Access to Petstore orders"
            externalDocs: 
              description: "Find out more about our store"
              url: "http://swagger.io"
            name: user
      StageName: prod
    Type: "AWS::Serverless::Api"
  ApiGatewayStepFunctionsRole: 
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          - 
            Action: 
              - "sts:AssumeRole"
            Effect: Allow
            Principal: 
              Service: 
                - apigateway.amazonaws.com
            Sid: AllowApiGatewayServiceToAssumeRole
        Version: "2012-10-17"
      Path: /
      Policies: 
        - 
          PolicyDocument: 
            Statement: 
              - 
                Action: 
                  - "states:StartExecution"
                Effect: Allow
                Resource: 
                  - StepFunctionStateMachine
            Version: "2012-10-17"
          PolicyName: CallStepFunctions
    Type: "AWS::IAM::Role"
  EmailNotifierServiceFunction: 
    Properties: 
      CodeUri: ../code/email/
      Environment: 
        Variables: 
          NOTIFIER_TOPIC: NotifierSNSTopic
      Handler: email_sns.lambda_handler
      Role: SnsNotifierServiceRole.Arn
      Runtime: python2.7
    Type: "AWS::Serverless::Function"
  NotifierSNSTopic: 
    Properties: 
      Subscription: 
        - 
          Endpoint: NotificationEmail
          Protocol: email
    Type: "AWS::SNS::Topic"
  SlackNotifierServiceFunction: 
    Properties: 
      CodeUri: ../code/slack.zip
      Environment: 
        Variables: 
          SLACK_TOKEN: SlackToken
      Handler: slack.lambda_handler
      Runtime: python2.7
    Type: "AWS::Serverless::Function"
  SmsNotifierServiceFunction: 
    Properties: 
      CodeUri: ../code/sms/
      Environment: 
        Variables: 
          NOTIFIER_TOPIC: NotifierSNSTopic
      Handler: sms_sns.lambda_handler
      Role: SnsNotifierServiceRole.Arn
      Runtime: python2.7
    Type: "AWS::Serverless::Function"
  SnsNotifierServiceRole: 
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          - 
            Action: 
              - "sts:AssumeRole"
            Effect: Allow
            Principal: 
              Service: 
                - lambda.amazonaws.com
            Sid: AllowLambdaServiceToAssumeRole
        Version: "2012-10-17"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: /
      Policies: 
        - 
          PolicyDocument: 
            Statement: 
              - 
                Action: 
                  - "sns:Publish"
                Effect: Allow
                Resource: 
                  - NotifierSNSTopic
                  - "*"
            Version: "2012-10-17"
          PolicyName: PublishSnsTopic
    Type: "AWS::IAM::Role"
  StepFunctionStateMachine: 
    Properties: 
      DefinitionString: |
          {
              "Comment": "Demo for API GW->SFN",
              "StartAt": "NotifierState",
              "States": {
                "NotifierState": {
                  "Type" : "Choice",
                  "Choices": [
                    {
                      "Variable": "$.notifier",
                      "StringEquals": "Email",
                      "Next": "EmailNotifier"
                    },
                    {
                      "Variable": "$.notifier",
                      "StringEquals": "Sms",
                      "Next": "SmsNotifier"
                    },
                    {
                      "Variable": "$.notifier",
                      "StringEquals": "Slack",
                      "Next": "SlackNotifier"
                    },
                    {
                      "Variable": "$.notify",
                      "StringEquals": "Twilio",
                      "Next": "NotImplementedYet"
                    }
                  ],
                  "Default": "IgnoreNotification"
                },
                "IgnoreNotification": {
                  "Type": "Pass",
                  "Next": "SayHi"
                },
                "NotImplementedYet": {
                  "Type": "Fail",
                  "Cause": "Feature not implemented yet!"
                },
                "EmailNotifier": {
                  "Type": "Task",
                  "Resource": "${EmailNotifierServiceFunction.Arn}",
                  "Next": "SayHi"
                },
                "SlackNotifier": {
                  "Type": "Task",
                  "Resource": "${SlackNotifierServiceFunction.Arn}",
                  "Next": "SayHi"
                },
                "SmsNotifier": {
                  "Type": "Task",
                  "Resource": "${SmsNotifierServiceFunction.Arn}",
                  "Next": "SayHi"
                },
                "SayHi": {
                  "Type": "Pass",
                  "Result": "Hi!",
                  "End": true
                }
              }
          }
      RoleArn: StepFunctionsServiceRole.Arn
    Type: "AWS::StepFunctions::StateMachine"
  StepFunctionsAPI: 
    Properties: 
      DefinitionBody: 
        basePath: /prod
        definitions: 
          Empty: 
            title: "Empty Schema"
            type: object
        info: 
          title: AwsSamExample
        paths: 
          /: 
            options: 
              consumes: 
                - application/json
              produces: 
                - application/json
              responses: 
                200: 
                  description: "200 response"
                  headers: 
                    Access-Control-Allow-Headers: 
                      type: string
                    Access-Control-Allow-Methods: 
                      type: string
                    Access-Control-Allow-Origin: 
                      type: string
                  schema: 
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration: 
                cacheKeyParameters: []
                cacheNamespace: "cache namespace"
                credentials: "arn:aws:iam::012345678901:role/apigateway-invoke-lambda-exec-role"
                httpMethod: POST
                requestParameters: 
                  integration.request.path.stage: method.request.querystring.version
                  integration.request.querystring.provider: method.request.querystring.vendor
                requestTemplates: 
                  application/json: "#set ($root=$input.path('$')) { \"stage\": \"$root.name\", \"user-id\": \"$root.key\" }"
                  application/xml: "#set ($root=$input.path('$')) <stage>$root.name</stage> "
                responses: 
                  "2\\d{2}": 
                    responseParameters: 
                      method.response.header.requestId: integration.response.header.cid
                    responseTemplates: 
                      application/json: "#set ($root=$input.path('$')) { \"stage\": \"$root.name\", \"user-id\": \"$root.key\" }"
                      application/xml: "#set ($root=$input.path('$')) <stage>$root.name</stage> "
                    statusCode: "200"
                  "302": 
                    responseParameters: 
                      method.response.header.Location: integration.response.body.redirect.url
                    statusCode: "302"
                  default: 
                    responseParameters: 
                      method.response.header.test-method-response-header: "'static value'"
                    statusCode: "400"
                type: aws
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:012345678901:function:HelloWorld/invocations"
            x-amazon-apigateway-any-method: 
              produces: 
                - application/json
              responses: 
                200: 
                  description: "200 response"
                  schema: 
                    $ref: "#/definitions/Empty"
              security: 
                - 
                  test-authorizer: []
              x-amazon-apigateway-integration: 
                httpMethod: POST
                passthroughBehavior: when_no_match
                responses: 
                  default: 
                    statusCode: 200
                type: aws_proxy
                uri: EmailNotifierServiceFunction.Arn
          "/{proxy+}":
            options: 
              consumes: 
                - application/json
              produces: 
                - application/json
              responses: 
                200: 
                  description: "200 response"
                  headers: 
                    Access-Control-Allow-Headers: 
                      type: string
                    Access-Control-Allow-Methods: 
                      type: string
                    Access-Control-Allow-Origin: 
                      type: string
                  schema: 
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration: 
                passthroughBehavior: when_no_match
                requestTemplates: 
                  application/json: "{\"statusCode\": 200}"
                responses: 
                  default: 
                    responseParameters: 
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    statusCode: 200
                type: mock
            x-amazon-apigateway-any-method: 
              parameters: 
                - 
                  in: path
                  name: proxy
                  required: true
                  type: string
              produces: 
                - application/json
              responses: {}
              x-amazon-apigateway-auth: 
                type: aws_iam
              x-amazon-apigateway-integration: 
                httpMethod: POST
                type: aws_proxy
                uri: "arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<accountId>>:function:${stageVariables.LambdaFunctionName}/invocations"
        schemes: 
          - https
        securityDefinitions: 
          test-authorizer: 
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authorizer: 
              authorizerCredentials: "arn:aws:iam::account-id:role"
              authorizerResultTtlInSeconds: 60
              authorizerUri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:account-id:function:function-name/invocations"
              identityValidationExpression: "^x-[a-z]+"
              type: token
            x-amazon-apigateway-authtype: oauth2
        swagger: "2.0"
      StageName: dev
    Type: "AWS::Serverless::Api"
  StepFunctionsServiceRole: 
    Properties: 
      AssumeRolePolicyDocument: 
        Statement: 
          - 
            Action: 
              - "sts:AssumeRole"
            Effect: Allow
            Principal: 
              Service: 
                - "states.${AWS::Region}.amazonaws.com"
            Sid: AllowStepFunctionsServiceToAssumeRole
        Version: "2012-10-17"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
      Path: /
      Policies: 
        - 
          PolicyDocument: 
            Statement: 
              - 
                Action: 
                  - "lambda:InvokeFunction"
                Effect: Allow
                Resource: 
                  - "${SlackNotifierServiceFunction.Arn}"
                  - "${EmailNotifierServiceFunction.Arn}"
                  - "${SmsNotifierServiceFunction.Arn}"
            Version: "2012-10-17"
          PolicyName: CallLambdaFunctions
    Type: "AWS::IAM::Role"
Transform: "AWS::Serverless-2016-10-31"
