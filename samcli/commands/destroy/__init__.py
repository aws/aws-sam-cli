# -*- coding: utf-8 -*-
"""
Init command to scaffold a project app from a template
"""
import logging

import boto3
import click

from samcli.cli.main import pass_context, common_options
from samcli.commands.exceptions import UserException
from samcli.local.common.runtime_template import INIT_RUNTIMES, SUPPORTED_DEP_MANAGERS
from samcli.local.init import generate_project
from samcli.local.init.exceptions import GenerateProjectFailedError
from samcli.lib.telemetry.metrics import track_command

LOG = logging.getLogger(__name__)


@click.command("destroy", short_help="", context_settings={"ignore_unknown_options": True}, help="")
@click.argument("args", nargs=-1, type=click.UNPROCESSED)
@click.option('--stack-name',
              required=True,
              help="The name of the AWS CloudFormation stack you're deploying to. "
                   "If you specify an existing stack, the command updates the stack. "
                   "If you specify a new stack, the command creates it.")
@click.option('--retain-resources',
              required=False,
              help="For  stacks  in  the DELETE_FAILED state, a list of resource logical"
                   "IDs that are associated with the resources you want to retain.  During  deletion,  "
                   "AWS  CloudFormation  deletes  the stack but does not "
                   "delete the retained resources."
                   "Retaining resources is useful when you  cannot  delete  a  resource,"
                   "such as a non-empty S3 bucket, but you want to delete the stack.")
@click.option('--role-arn',
              required=False,
              help="""The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that AWS 
              CloudFormation assumes to delete the stack. AWS CloudFormation uses the role's credentials to make 
              calls on your behalf. If you don't specify a value, AWS CloudFormation uses the role  that was  
              previously  associated with the stack. If no role is available, AWS CloudFormation uses a temporary 
              session that is  generated  from your user credentials.""")
@click.option('--client-request-token',
              required=False,
              help="""        A unique identifier for this DeleteStack request. Specify this token
          if you plan to retry requests so that AWS CloudFormation knows  that
          you're  not  attempting  to  delete  a stack with the same name. You
          might retry DeleteStack requests to ensure that  AWS  CloudFormation
          successfully received them.

          All  events  triggered  by  a given stack operation are assigned the
          same client request token, which you can use  to  track  operations.
          For  example,  if you execute a CreateStack operation with the token
          token1 , then all the StackEvents generated by that  operation  will
          have ClientRequestToken set as token1 .

          In the console, stack operations display the client request token on
          the Events tab. Stack operations that are initiated from the console
          use  the  token  format  Console-StackOperation-ID , which helps you
          easily identify the stack operation . For example, if you  create  a
          stack using the console, each stack event would be assigned the same
          token     in     the     following     format:      Console-CreateS-
          tack-7f59c3cf-00d2-40c7-b2ff-e75db0987002 .""")
@common_options
@pass_context
@track_command
def cli(ctx, stack_name, retain_resources=None, role_arn=None, client_request_token=None):
    """
    Destroys the stack
    """
    # All logic must be implemented in the `do_cli` method. This helps ease unit tests
    do_cli(ctx, stack_name, retain_resources, role_arn, client_request_token)  # pragma: no cover


def do_cli(ctx, stack_name, retain_resources, role_arn, client_request_token):
    """
    Implementation of the ``cli`` method, just separated out for unit testing purposes
    """
    click.confirm('Are you sure you want to delete the stack {}?'.format(stack_name), default=True, abort=True)
    cfn = boto3.client('cloudformation')
    try:
        response = cfn.delete_stack(
            StackName=stack_name,
            RetainResources=retain_resources,
            RoleARN=role_arn,
            ClientRequestToken=client_request_token,
        )
    except Exception as e:
        pass
