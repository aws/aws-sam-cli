version: 1.0.{build}
image: 
  - Ubuntu

environment:
  AWS_DEFAULT_REGION: us-east-1
  SAM_CLI_DEV: 1
 
  matrix:

    - PYTHON_VERSION: '3.6'
      PYTHON_ARCH: '64'
      NOSE_PARAMETERIZED_NO_WARN: 1
      INSTALL_PY_37_PIP: 1
      INSTALL_PY_38_PIP: 1
      INSTALL_PY_39_PIP: 1
      APPVEYOR_CONSOLE_DISABLE_PTY: true

    - PYTHON_VERSION: '3.7'
      PYTHON_ARCH: '64'
      NOSE_PARAMETERIZED_NO_WARN: 1
      INSTALL_PY_36_PIP: 1
      INSTALL_PY_38_PIP: 1
      INSTALL_PY_39_PIP: 1
      APPVEYOR_CONSOLE_DISABLE_PTY: true

    - PYTHON_VERSION: '3.8'
      PYTHON_ARCH: '64'
      NOSE_PARAMETERIZED_NO_WARN: 1
      INSTALL_PY_36_PIP: 1
      INSTALL_PY_37_PIP: 1
      INSTALL_PY_39_PIP: 1
      APPVEYOR_CONSOLE_DISABLE_PTY: true

    - PYTHON_VERSION: '3.9'
      PYTHON_ARCH: '64'
      NOSE_PARAMETERIZED_NO_WARN: 1
      INSTALL_PY_36_PIP: 1
      INSTALL_PY_37_PIP: 1
      INSTALL_PY_38_PIP: 1
      APPVEYOR_CONSOLE_DISABLE_PTY: true

install:
  # apt repo for python3.9 installation
  - sh: "sudo add-apt-repository ppa:deadsnakes/ppa"
  # AppVeyor's apt-get cache might be outdated, and the package could potentially be 404.
  - sh: "sudo apt-get update"

  - sh: "gvm use go1.15"
  - sh: "echo $PATH"
  - sh: "ls /usr/"
  - sh: "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64"
  - sh: "PATH=$JAVA_HOME/bin:$PATH"
  - sh: "source ${HOME}/venv${PYTHON_VERSION}/bin/activate"
  - sh: "rvm use 2.7.2"
  - sh: "docker --version"
  # install nodejs
  - sh: "nvm install --lts=Fermium"
  - sh: "node --version"
  - sh: "npx --version"

  # Install AWS CLI
  - sh: "virtualenv aws_cli"
  - sh: "./aws_cli/bin/python -m pip install awscli"
  - sh: "PATH=$(echo $PWD'/aws_cli/bin'):$PATH"

  # Install latest maven
  - sh: "sudo apt update"
  - sh: "sudo apt install maven"
  - sh: "mvn --version"

  - sh: "sudo apt-get -y install python3.6"
  - sh: "sudo apt-get -y install python3.7"
  - sh: "sudo apt-get -y install python3.8"
  - sh: "sudo apt-get -y install python3.9"

  - sh: "which python3.8"
  - sh: "which python3.7"
  - sh: "which python3.6"
  - sh: "which python3.9"

  - sh: "PATH=$PATH:/usr/bin/python3.9:/usr/bin/python3.8:/usr/bin/python3.7"
  - sh: "curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py"
  - sh: "curl https://bootstrap.pypa.io/pip/3.6/get-pip.py -o get-pip-36.py"

  - sh: "sudo apt-get -y install python3-distutils"
  - sh: "sudo apt-get -y install python3.9-distutils"
  - ps: "If ($env:INSTALL_PY_39_PIP) {python3.9 get-pip.py --user}"
  - ps: "If ($env:INSTALL_PY_38_PIP) {python3.8 get-pip.py --user}"
  - ps: "If ($env:INSTALL_PY_37_PIP) {python3.7 get-pip.py --user}"
  - ps: "If ($env:INSTALL_PY_36_PIP) {python3.6 get-pip-36.py --user}"

  # required for RIE with arm64 in linux
  - sh: "docker run --rm --privileged multiarch/qemu-user-static --reset -p yes"

  # update ca-certificates which causes failures with newest golang library
  - sh: "sudo apt-get install --reinstall ca-certificates"

build_script:
  - "python -c \"import sys; print(sys.executable)\""

test_script:
  # Pre-dev Tests
  - "pip install -e \".[pre-dev]\""

  # Runs only in Linux, logging Public ECR when running canary and cred is available
  - sh: "
    if [[ -n $BY_CANARY ]];
      then echo Logging in Public ECR; aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws;
    fi"

  - "pip install -e \".[dev]\""
  - sh: "pytest -vv tests/iac_integration"
