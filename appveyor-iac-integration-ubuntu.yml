version: 1.0.{build}
image: 
  - Ubuntu2004

environment:
  AWS_DEFAULT_REGION: us-east-1
  SAM_CLI_DEV: 1
 
  matrix:

    - PYTHON_VERSION: '3.7'
      PYTHON_ARCH: '64'
      NOSE_PARAMETERIZED_NO_WARN: 1
      INSTALL_PY_38_PIP: 1
      INSTALL_PY_39_PIP: 1
      APPVEYOR_CONSOLE_DISABLE_PTY: true

    - PYTHON_VERSION: '3.8'
      PYTHON_ARCH: '64'
      NOSE_PARAMETERIZED_NO_WARN: 1
      INSTALL_PY_37_PIP: 1
      INSTALL_PY_39_PIP: 1
      APPVEYOR_CONSOLE_DISABLE_PTY: true

    - PYTHON_VERSION: '3.9'
      PYTHON_ARCH: '64'
      NOSE_PARAMETERIZED_NO_WARN: 1
      INSTALL_PY_37_PIP: 1
      INSTALL_PY_38_PIP: 1
      APPVEYOR_CONSOLE_DISABLE_PTY: true

install:
  # apt repo for python3.9 installation
  - sh: "sudo add-apt-repository ppa:deadsnakes/ppa"
  # AppVeyor's apt-get cache might be outdated, and the package could potentially be 404.
  - sh: "sudo apt-get update"

  - sh: "gvm use go1.19"
  - sh: "echo $PATH"
  - sh: "ls /usr/"
  - sh: "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64"
  - sh: "PATH=$JAVA_HOME/bin:$PATH"
  - sh: "source ${HOME}/venv${PYTHON_VERSION}/bin/activate"
  - sh: "rvm use 2.7.2"
  - sh: "docker --version"
  # install nodejs
  - sh: "nvm install --lts=Fermium"
  - sh: "node --version"
  - sh: "npx --version"

  # Install AWS CLI
  - sh: "virtualenv aws_cli"
  - sh: "./aws_cli/bin/python -m pip install awscli"
  - sh: "PATH=$(echo $PWD'/aws_cli/bin'):$PATH"

  # Install latest maven
  - sh: "sudo apt update"
  - sh: "sudo apt install maven"
  - sh: "mvn --version"

  - sh: "sudo apt-get -y install python3.7"
  - sh: "sudo apt-get -y install python3.8"
  - sh: "sudo apt-get -y install python3.9 python3.9-venv"

  - sh: "which python3.8"
  - sh: "which python3.7"
  - sh: "which python3.9"

  - sh: "PATH=$PATH:/usr/bin/python3.9:/usr/bin/python3.8:/usr/bin/python3.7"
  - sh: "curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py"

  - sh: "sudo apt-get -y install python3-distutils"
  - sh: "sudo apt-get -y install python3.9-distutils"
  - ps: "If ($env:INSTALL_PY_39_PIP) {python3.9 get-pip.py --user}"
  - ps: "If ($env:INSTALL_PY_38_PIP) {python3.8 get-pip.py --user}"
  - ps: "If ($env:INSTALL_PY_37_PIP) {python3.7 get-pip.py --user}"

  # get testing env vars
  - sh: "sudo apt install -y jq"
  - sh: "python3.9 -m venv .venv_env_vars"
  - sh: ".venv_env_vars/bin/pip install boto3"
  - sh: "test_env_var=$(.venv_env_vars/bin/python tests/get_testing_resources.py)"
  - sh: '
    if [ $? -ne 0 ]; then
      echo "get_testing_resources failed. Failed to acquire credentials or test resources.";
      false;
    fi
  '

  - sh: 'export CI_ACCESS_ROLE_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID'
  - sh: 'export CI_ACCESS_ROLE_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY'
  - sh: 'export CI_ACCESS_ROLE_AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN'

  - sh: 'export AWS_ACCESS_KEY_ID=$(echo "$test_env_var" | jq -j ".accessKeyID")'
  - sh: 'export AWS_SECRET_ACCESS_KEY=$(echo "$test_env_var" | jq -j ".secretAccessKey")'
  - sh: 'export AWS_SESSION_TOKEN=$(echo "$test_env_var" | jq -j ".sessionToken")'
  - sh: 'export TASK_TOKEN=$(echo "$test_env_var" | jq -j ".taskToken")'
  - sh: 'export AWS_S3_TESTING=$(echo "$test_env_var" | jq -j ".TestBucketName")'
  - sh: 'export AWS_ECR_TESTING=$(echo "$test_env_var" | jq -j ".TestECRURI")'
  - sh: 'export AWS_KMS_KEY=$(echo "$test_env_var" | jq -j ".TestKMSKeyArn")'
  - sh: 'export AWS_SIGNING_PROFILE_NAME=$(echo "$test_env_var" | jq -j ".TestSigningProfileName")'
  - sh: 'export AWS_SIGNING_PROFILE_VERSION_ARN=$(echo "$test_env_var" | jq -j ".TestSigningProfileARN")'

  # required for RIE with arm64 in linux
  - sh: "docker run --rm --privileged multiarch/qemu-user-static --reset -p yes"

  # update ca-certificates which causes failures with newest golang library
  - sh: "sudo apt-get install --reinstall ca-certificates"

build_script:
  - "python -c \"import sys; print(sys.executable)\""

test_script:
  # Pre-dev Tests
  - "pip install -e \".[pre-dev]\""

  # Runs only in Linux, logging Public ECR when running canary and cred is available
  - sh: "
    if [[ -n $BY_CANARY ]];
      then echo Logging in Public ECR; aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws;
    fi"

  - "pip install -e \".[dev]\""
  - sh: "pytest -vv tests/iac_integration"

# Final clean up no matter success or failure
on_finish:
  - sh: 'export AWS_ACCESS_KEY_ID=$CI_ACCESS_ROLE_AWS_ACCESS_KEY_ID'
  - sh: 'export AWS_SECRET_ACCESS_KEY=$CI_ACCESS_ROLE_AWS_SECRET_ACCESS_KEY'
  - sh: 'export AWS_SESSION_TOKEN=$CI_ACCESS_ROLE_AWS_SESSION_TOKEN'

  - sh: 'aws stepfunctions send-task-success --task-token "$TASK_TOKEN" --task-output "{}" --region us-west-2'
