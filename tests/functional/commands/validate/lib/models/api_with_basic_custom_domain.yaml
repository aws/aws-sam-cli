Parameters:
  MyDomainName: 
    Type: String
    Default: another-example.com

  MyDomainCert: 
    Type: String
    Default: another-api-arn

Globals:
  Api:
    Domain:
      DomainName: !Ref MyDomainName
      CertificateArn: !Ref MyDomainCert

Resources:
  MyFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event) => {
          const response = {
            statusCode: 200,
            body: JSON.stringify('Hello from Lambda!'),
          };
          return response;
        };
      Handler: index.handler
      Runtime: nodejs12.x
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Method: Put
            Path: /get
        Fetch:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Method: Post
            Path: /fetch
        ImplicitGet:
          Type: Api
          Properties:
            Method: Post
            Path: /implicit
        AnotherGet:
          Type: Api
          Properties:
            RestApiId: !Ref MyAnotherApi
            Method: Post
            Path: /another/get

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      OpenApiVersion: 3.0.1
      StageName: Prod
      Domain:
        DomainName: 'api-example.com'
        CertificateArn: 'my-api-cert-arn'
        EndpointConfiguration: 'EDGE'
        BasePath: [ "/get", "/fetch" ]
        MutualTlsAuthentication:
          TruststoreUri: 'my-api-truststore-uri'
          TruststoreVersion: 'my-api-truststore-version'
        SecurityPolicy: TLS_1_2


  MyAnotherApi:
    Type: AWS::Serverless::Api
    Properties:
      OpenApiVersion: 3.0.1
      StageName: Prod

