Parameters:
  SQSArn:
    Type: String
    Default: my-sqs-arn
  UseExistingQueue:
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
  CreateSNSTopic:
    Type: String
    AllowedValues:
      - true
      - false
    Default: true
Conditions:
  QueueCreationDisabled: !Equals [!Ref UseExistingQueue, true]
  TopicCreationEnabled: !Equals [!Ref CreateSNSTopic, true]
Resources:
  MyTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 70
        MaximumRetryAttempts: 1
        DestinationConfig:
          OnSuccess:
            Type: SQS
            Destination: !If [QueueCreationDisabled, !Ref SQSArn, !Ref 'AWS::NoValue']
          OnFailure: 
            Type: SNS
            Destination: !If [TopicCreationEnabled, !Ref 'AWS::NoValue', 'SOME-SNS-ARN']
      InlineCode: |
        exports.handler = function(event, context, callback) {
            var event_received_at = new Date().toISOString();
            console.log('Event received at: ' + event_received_at);
            console.log('Received event:', JSON.stringify(event, null, 2));

            if (event.Success) {
                console.log("Success");
                context.callbackWaitsForEmptyEventLoop = false;
                callback(null);
            } else {
                console.log("Failure");
                context.callbackWaitsForEmptyEventLoop = false;
                callback(new Error("Failure from event, Success = false, I am failing!"), 'Destination Function Error Thrown');
            }
        };      
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 1024
  MyTestFunction2:
    Type: AWS::Serverless::Function
    Properties:
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 70
        MaximumRetryAttempts: 1
        DestinationConfig:
          OnSuccess:
            Type: Lambda
            Destination: !GetAtt DestinationLambda.Arn
          OnFailure: 
            Type: EventBridge
            Destination: event-bus-arn
      InlineCode: |
        exports.handler = function(event, context, callback) {
            var event_received_at = new Date().toISOString();
            console.log('Event received at: ' + event_received_at);
            console.log('Received event:', JSON.stringify(event, null, 2));

            if (event.Success) {
                console.log("Success");
                context.callbackWaitsForEmptyEventLoop = false;
                callback(null);
            } else {
                console.log("Failure");
                context.callbackWaitsForEmptyEventLoop = false;
                callback(new Error("Failure from event, Success = false, I am failing!"), 'Destination Function Error Thrown');
            }
        };      
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 1024

  DestinationLambda:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event) => {
          const response = {
            statusCode: 200,
            body: JSON.stringify('Hello from Lambda!'),
          };
          return response;
        };
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 1024
  SNSSubscription:
    Type: AWS::SNS::Subscription
    Condition: TopicCreationEnabled
    Properties: 
      Endpoint: example@example.com
      Protocol: email
      TopicArn: !Ref MyTestFunction.DestinationTopic 
