AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: A template to test for implicit HttpApi condition handling.
Conditions:
  MyCondition:
    Fn::Equals:
      - true
      - false
  Cond:
    Fn::Equals:
      - true
      - false
  Cond1:
    Fn::Equals:
      - true
      - false
  Cond2:
    Fn::Equals:
      - true
      - false
  Cond3:
    Fn::Equals:
      - true
      - false
  Cond4:
    Fn::Equals:
      - true
      - false
  Cond5:
    Fn::Equals:
      - true
      - false
  Cond6:
    Fn::Equals:
      - true
      - false
  Cond7:
    Fn::Equals:
      - true
      - false
  Cond8:
    Fn::Equals:
      - true
      - false
  Cond9:
    Fn::Equals:
      - true
      - false
Globals:
  HttpApi:
    RouteSettings:
      "GET /sub":
        ThrottlingBurstLimit: 100
    Auth:
      Authorizers:
        oauth2:
          AuthorizationScopes:
            - scope4
          JwtConfiguration:
            issuer: "https://www.example.com/v1/connect/oidc"
            audience:
              - MyApi
          IdentitySource: "$request.querystring.param"
Resources:
  hello:
    Type: 'AWS::Serverless::Function'
    Condition: MyCondition
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 3
      InlineCode: |
        exports.handler = async () => ‘Hello World!'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            RouteSettings:
              ThrottlingBurstLimit: 200
            Path: /sub
            Method: get
  helloworld1099:
    Type: 'AWS::Serverless::Function'
    Condition: Cond
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 3
      InlineCode: |
        exports.handler = async () => ‘Hello World!'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            RouteSettings:
              ThrottlingBurstLimit: 200
            Auth:
              Authorizer: oauth2
        HttpApiEvent2:
          Type: HttpApi
          Properties:
            Path: /hello/again
            Method: get
  helloworld1:
    Type: 'AWS::Serverless::Function'
    Condition: Cond1
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 3
      InlineCode: |
        exports.handler = async () => ‘Hello World!'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /sub1
            Method: post 
  helloworld2:
    Type: 'AWS::Serverless::Function'
    Condition: Cond2
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 3
      InlineCode: |
        exports.handler = async () => ‘Hello World!'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /sub2
            Method: post 
  helloworld3:
    Type: 'AWS::Serverless::Function'
    Condition: Cond3
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 3
      InlineCode: |
        exports.handler = async () => ‘Hello World!'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /sub3
            Method: post 
  helloworld4:
    Type: 'AWS::Serverless::Function'
    Condition: Cond4
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 3
      InlineCode: |
        exports.handler = async () => ‘Hello World!'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /sub4
            Method: post 
  helloworld5:
    Type: 'AWS::Serverless::Function'
    Condition: Cond5
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 3
      InlineCode: |
        exports.handler = async () => ‘Hello World!'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /sub5
            Method: post 
  helloworld6:
    Type: 'AWS::Serverless::Function'
    Condition: Cond6
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 3
      InlineCode: |
        exports.handler = async () => ‘Hello World!'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /sub6
            Method: post 
  helloworld7:
    Type: 'AWS::Serverless::Function'
    Condition: Cond7
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 3
      InlineCode: |
        exports.handler = async () => ‘Hello World!'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /sub7
            Method: post 
  helloworld8:
    Type: 'AWS::Serverless::Function'
    Condition: Cond8
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 3
      InlineCode: |
        exports.handler = async () => ‘Hello World!'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /sub8
            Method: post 
  helloworld9:
    Type: 'AWS::Serverless::Function'
    Condition: Cond9
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 3
      InlineCode: |
        exports.handler = async () => ‘Hello World!'
      Events:
        HttpApiEvent:
          Type: HttpApi
          Properties:
            Path: /sub9
            Method: post 
