{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "AWS SAM CLI samconfig schema",
  "type": "object",
  "properties": {
    "version": {
      "title": "Config version",
      "type": "number",
      "default": 0.1
    }
  },
  "required": [
    "version"
  ],
  "additionalProperties": false,
  "patternProperties": {
    "^.+$": {
      "title": "Environment",
      "properties": {
        "init": {
          "title": "Init command",
          "description": "Initialize an AWS SAM application.",
          "properties": {
            "parameters": {
              "title": "Parameters for the init command",
              "description": "Available parameters for the init command:\n",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "validate": {
          "title": "Validate command",
          "description": "Validate an AWS SAM Template.",
          "properties": {
            "parameters": {
              "title": "Parameters for the validate command",
              "description": "Available parameters for the validate command:\n* template_file:\nAWS SAM template file.\n* profile:\nSelect a specific profile from your credential file to get AWS credentials.\n* region:\nSet the AWS Region of the service. (e.g. us-east-1)\n* beta_features:\nEnable/Disable beta features.\n* debug:\nTurn on debug logging to print debug message generated by AWS SAM CLI and display timestamps.\n* lint:\nRun linting validation on template through cfn-lint. Create a cfnlintrc config file to specify additional parameters. For more information, see: https://github.com/aws-cloudformation/cfn-lint",
              "type": "object",
              "properties": {
                "template_file": {
                  "title": "template_file",
                  "type": "string",
                  "description": "AWS SAM template file.",
                  "default": "template.[yaml|yml|json]"
                },
                "profile": {
                  "title": "profile",
                  "type": "string",
                  "description": "Select a specific profile from your credential file to get AWS credentials."
                },
                "region": {
                  "title": "region",
                  "type": "string",
                  "description": "Set the AWS Region of the service. (e.g. us-east-1)"
                },
                "beta_features": {
                  "title": "beta_features",
                  "type": "boolean",
                  "description": "Enable/Disable beta features."
                },
                "debug": {
                  "title": "debug",
                  "type": "boolean",
                  "description": "Turn on debug logging to print debug message generated by AWS SAM CLI and display timestamps."
                },
                "lint": {
                  "title": "lint",
                  "type": "boolean",
                  "description": "Run linting validation on template through cfn-lint. Create a cfnlintrc config file to specify additional parameters. For more information, see: https://github.com/aws-cloudformation/cfn-lint"
                }
              }
            }
          },
          "required": [
            "parameters"
          ]
        },
        "build": {
          "title": "Build command",
          "description": "Build AWS serverless function code.",
          "properties": {
            "parameters": {
              "title": "Parameters for the build command",
              "description": "Available parameters for the build command:\n* hook_name:\nHook package id to extend AWS SAM CLI commands functionality. \n\nExample: `terraform` to extend AWS SAM CLI commands functionality to support terraform applications. \n\nAvailable Hook Names: ['terraform']\n* skip_prepare_infra:\nSkip preparation stage when there are no infrastructure changes. Only used in conjunction with --hook-name.\n* use_container:\nBuild functions within an AWS Lambda-like container.\n* container_env_var:\nEnvironment variables to be passed into build containers\nResource format (FuncName.VarName=Value) or Global format (VarName=Value).\n\n Example: --container-env-var Func1.VAR1=value1 --container-env-var VAR2=value2\n* container_env_var_file:\nEnvironment variables json file (e.g., env_vars.json) to be passed to build containers.\n* build_image:\nContainer image URIs for building functions/layers. You can specify for all functions/layers with just the image URI (--build-image public.ecr.aws/sam/build-nodejs18.x:latest). You can specify for each individual function with (--build-image FunctionLogicalID=public.ecr.aws/sam/build-nodejs18.x:latest). A combination of the two can be used. If a function does not have build image specified or an image URI for all functions, the default SAM CLI build images will be used.\n* exclude:\nName of the resource(s) to exclude from AWS SAM CLI build.\n* parallel:\nEnable parallel builds for AWS SAM template's functions and layers.\n* mount_with:\nSpecify mount mode for building functions/layers inside container. If it is mounted with write permissions, some files in source code directory may be changed/added by the build process. By default the source code directory is read only.\n* build_dir:\nDirectory to store build artifacts.Note: This directory will be first removed before starting a build.\n* cache_dir:\nDirectory to store cached artifacts. The default cache directory is .aws-sam/cache\n* base_dir:\nResolve relative paths to function's source code with respect to this directory. Use this if SAM template and source code are not in same enclosing folder. By default, relative paths are resolved with respect to the SAM template's location.\n* manifest:\nPath to a custom dependency manifest. Example: custom-package.json\n* cached:\nEnable cached builds.Reuse build artifacts that have not changed from previous builds. \n\nAWS SAM CLI evaluates if files in your project directory have changed. \n\nNote: AWS SAM CLI does not evaluate changes made to third party modules that the project depends on.Example: Python function includes a requirements.txt file with the following entry requests=1.x and the latest request module version changes from 1.1 to 1.2, AWS SAM CLI will not pull the latest version until a non-cached build is run.\n* template_file:\nAWS SAM template file.\n* parameter_overrides:\nString that contains AWS CloudFormation parameter overrides encoded as key=value pairs.\n* skip_pull_image:\nSkip pulling down the latest Docker image for Lambda runtime.\n* docker_network:\nName or ID of an existing docker network for AWS Lambda docker containers to connect to, along with the default bridge network. If not specified, the Lambda containers will only connect to the default bridge docker network.\n* beta_features:\nEnable/Disable beta features.\n* debug:\nTurn on debug logging to print debug message generated by AWS SAM CLI and display timestamps.\n* profile:\nSelect a specific profile from your credential file to get AWS credentials.\n* region:\nSet the AWS Region of the service. (e.g. us-east-1)",
              "type": "object",
              "properties": {
                "hook_name": {
                  "title": "hook_name",
                  "type": "string",
                  "description": "Hook package id to extend AWS SAM CLI commands functionality. \n\nExample: `terraform` to extend AWS SAM CLI commands functionality to support terraform applications. \n\nAvailable Hook Names: ['terraform']"
                },
                "skip_prepare_infra": {
                  "title": "skip_prepare_infra",
                  "type": "boolean",
                  "description": "Skip preparation stage when there are no infrastructure changes. Only used in conjunction with --hook-name."
                },
                "use_container": {
                  "title": "use_container",
                  "type": "boolean",
                  "description": "Build functions within an AWS Lambda-like container."
                },
                "container_env_var": {
                  "title": "container_env_var",
                  "type": "string",
                  "description": "Environment variables to be passed into build containers\nResource format (FuncName.VarName=Value) or Global format (VarName=Value).\n\n Example: --container-env-var Func1.VAR1=value1 --container-env-var VAR2=value2"
                },
                "container_env_var_file": {
                  "title": "container_env_var_file",
                  "type": "string",
                  "description": "Environment variables json file (e.g., env_vars.json) to be passed to build containers."
                },
                "build_image": {
                  "title": "build_image",
                  "type": "string",
                  "description": "Container image URIs for building functions/layers. You can specify for all functions/layers with just the image URI (--build-image public.ecr.aws/sam/build-nodejs18.x:latest). You can specify for each individual function with (--build-image FunctionLogicalID=public.ecr.aws/sam/build-nodejs18.x:latest). A combination of the two can be used. If a function does not have build image specified or an image URI for all functions, the default SAM CLI build images will be used."
                },
                "exclude": {
                  "title": "exclude",
                  "type": "string",
                  "description": "Name of the resource(s) to exclude from AWS SAM CLI build."
                },
                "parallel": {
                  "title": "parallel",
                  "type": "boolean",
                  "description": "Enable parallel builds for AWS SAM template's functions and layers."
                },
                "mount_with": {
                  "title": "mount_with",
                  "type": "string",
                  "description": "Specify mount mode for building functions/layers inside container. If it is mounted with write permissions, some files in source code directory may be changed/added by the build process. By default the source code directory is read only.",
                  "default": "READ",
                  "enum": [
                    "READ",
                    "WRITE"
                  ]
                },
                "build_dir": {
                  "title": "build_dir",
                  "type": "string",
                  "description": "Directory to store build artifacts.Note: This directory will be first removed before starting a build.",
                  "default": ".aws-sam/build"
                },
                "cache_dir": {
                  "title": "cache_dir",
                  "type": "string",
                  "description": "Directory to store cached artifacts. The default cache directory is .aws-sam/cache",
                  "default": ".aws-sam/cache"
                },
                "base_dir": {
                  "title": "base_dir",
                  "type": "string",
                  "description": "Resolve relative paths to function's source code with respect to this directory. Use this if SAM template and source code are not in same enclosing folder. By default, relative paths are resolved with respect to the SAM template's location."
                },
                "manifest": {
                  "title": "manifest",
                  "type": "string",
                  "description": "Path to a custom dependency manifest. Example: custom-package.json"
                },
                "cached": {
                  "title": "cached",
                  "type": "boolean",
                  "description": "Enable cached builds.Reuse build artifacts that have not changed from previous builds. \n\nAWS SAM CLI evaluates if files in your project directory have changed. \n\nNote: AWS SAM CLI does not evaluate changes made to third party modules that the project depends on.Example: Python function includes a requirements.txt file with the following entry requests=1.x and the latest request module version changes from 1.1 to 1.2, AWS SAM CLI will not pull the latest version until a non-cached build is run."
                },
                "template_file": {
                  "title": "template_file",
                  "type": "string",
                  "description": "AWS SAM template file.",
                  "default": "template.[yaml|yml|json]"
                },
                "parameter_overrides": {
                  "title": "parameter_overrides",
                  "type": "string",
                  "description": "String that contains AWS CloudFormation parameter overrides encoded as key=value pairs."
                },
                "skip_pull_image": {
                  "title": "skip_pull_image",
                  "type": "boolean",
                  "description": "Skip pulling down the latest Docker image for Lambda runtime."
                },
                "docker_network": {
                  "title": "docker_network",
                  "type": "string",
                  "description": "Name or ID of an existing docker network for AWS Lambda docker containers to connect to, along with the default bridge network. If not specified, the Lambda containers will only connect to the default bridge docker network."
                },
                "beta_features": {
                  "title": "beta_features",
                  "type": "boolean",
                  "description": "Enable/Disable beta features."
                },
                "debug": {
                  "title": "debug",
                  "type": "boolean",
                  "description": "Turn on debug logging to print debug message generated by AWS SAM CLI and display timestamps."
                },
                "profile": {
                  "title": "profile",
                  "type": "string",
                  "description": "Select a specific profile from your credential file to get AWS credentials."
                },
                "region": {
                  "title": "region",
                  "type": "string",
                  "description": "Set the AWS Region of the service. (e.g. us-east-1)"
                }
              }
            }
          },
          "required": [
            "parameters"
          ]
        },
        "local_invoke": {
          "title": "Local Invoke command",
          "description": "Invoke AWS serverless functions locally.",
          "properties": {
            "parameters": {
              "title": "Parameters for the local invoke command",
              "description": "Available parameters for the local invoke command:\n* hook_name:\nHook package id to extend AWS SAM CLI commands functionality. \n\nExample: `terraform` to extend AWS SAM CLI commands functionality to support terraform applications. \n\nAvailable Hook Names: ['terraform']\n* skip_prepare_infra:\nSkip preparation stage when there are no infrastructure changes. Only used in conjunction with --hook-name.\n* event:\nJSON file containing event data passed to the Lambda function during invoke. If this option is not specified, no event is assumed. Pass in the value '-' to input JSON via stdin\n* no_event:\nDEPRECATED: By default no event is assumed.\n* template_file:\nAWS SAM template which references built artifacts for resources in the template. (if applicable)\n* env_vars:\nJSON file containing values for Lambda function's environment variables.\n* parameter_overrides:\nString that contains AWS CloudFormation parameter overrides encoded as key=value pairs.\n* debug_port:\nWhen specified, Lambda function container will start in debug mode and will expose this port on localhost.\n* debugger_path:\nHost path to a debugger that will be mounted into the Lambda container.\n* debug_args:\nAdditional arguments to be passed to the debugger.\n* container_env_vars:\nJSON file containing environment variables to be set within the container environment\n* docker_volume_basedir:\nSpecify the location basedir where the SAM template exists. If Docker is running on a remote machine, Path of the SAM template must be mounted on the Docker machine and modified to match the remote machine.\n* log_file:\nFile to capture output logs.\n* layer_cache_basedir:\nSpecify the location basedir where the lambda layers used by the template will be downloaded to.\n* skip_pull_image:\nSkip pulling down the latest Docker image for Lambda runtime.\n* docker_network:\nName or ID of an existing docker network for AWS Lambda docker containers to connect to, along with the default bridge network. If not specified, the Lambda containers will only connect to the default bridge docker network.\n* force_image_build:\nForce rebuilding the image used for invoking functions with layers.\n* shutdown:\nEmulate a shutdown event after invoke completes, to test extension handling of shutdown behavior.\n* container_host:\nHost of locally emulated Lambda container. This option is useful when the container runs on a different host than AWS SAM CLI. For example, if one wants to run AWS SAM CLI in a Docker container on macOS, this option could specify `host.docker.internal`\n* container_host_interface:\nIP address of the host network interface that container ports should bind to. Use 0.0.0.0 to bind to all interfaces.\n* invoke_image:\nContainer image URIs for invoking functions or starting api and function. One can specify the image URI used for the local function invocation (--invoke-image public.ecr.aws/sam/build-nodejs14.x:latest). One can also specify for each individual function with (--invoke-image Function1=public.ecr.aws/sam/build-nodejs14.x:latest). If a function does not have invoke image specified, the default AWS SAM CLI emulation image will be used.\n* beta_features:\nEnable/Disable beta features.\n* debug:\nTurn on debug logging to print debug message generated by AWS SAM CLI and display timestamps.\n* profile:\nSelect a specific profile from your credential file to get AWS credentials.\n* region:\nSet the AWS Region of the service. (e.g. us-east-1)",
              "type": "object",
              "properties": {
                "hook_name": {
                  "title": "hook_name",
                  "type": "string",
                  "description": "Hook package id to extend AWS SAM CLI commands functionality. \n\nExample: `terraform` to extend AWS SAM CLI commands functionality to support terraform applications. \n\nAvailable Hook Names: ['terraform']"
                },
                "skip_prepare_infra": {
                  "title": "skip_prepare_infra",
                  "type": "boolean",
                  "description": "Skip preparation stage when there are no infrastructure changes. Only used in conjunction with --hook-name."
                },
                "event": {
                  "title": "event",
                  "type": "string",
                  "description": "JSON file containing event data passed to the Lambda function during invoke. If this option is not specified, no event is assumed. Pass in the value '-' to input JSON via stdin"
                },
                "no_event": {
                  "title": "no_event",
                  "type": "boolean",
                  "description": "DEPRECATED: By default no event is assumed.",
                  "default": true
                },
                "template_file": {
                  "title": "template_file",
                  "type": "string",
                  "description": "AWS SAM template which references built artifacts for resources in the template. (if applicable)",
                  "default": "template.[yaml|yml|json]"
                },
                "env_vars": {
                  "title": "env_vars",
                  "type": "string",
                  "description": "JSON file containing values for Lambda function's environment variables."
                },
                "parameter_overrides": {
                  "title": "parameter_overrides",
                  "type": "string",
                  "description": "String that contains AWS CloudFormation parameter overrides encoded as key=value pairs."
                },
                "debug_port": {
                  "title": "debug_port",
                  "type": "integer",
                  "description": "When specified, Lambda function container will start in debug mode and will expose this port on localhost."
                },
                "debugger_path": {
                  "title": "debugger_path",
                  "type": "string",
                  "description": "Host path to a debugger that will be mounted into the Lambda container."
                },
                "debug_args": {
                  "title": "debug_args",
                  "type": "string",
                  "description": "Additional arguments to be passed to the debugger."
                },
                "container_env_vars": {
                  "title": "container_env_vars",
                  "type": "string",
                  "description": "JSON file containing environment variables to be set within the container environment"
                },
                "docker_volume_basedir": {
                  "title": "docker_volume_basedir",
                  "type": "string",
                  "description": "Specify the location basedir where the SAM template exists. If Docker is running on a remote machine, Path of the SAM template must be mounted on the Docker machine and modified to match the remote machine."
                },
                "log_file": {
                  "title": "log_file",
                  "type": "string",
                  "description": "File to capture output logs."
                },
                "layer_cache_basedir": {
                  "title": "layer_cache_basedir",
                  "type": "string",
                  "description": "Specify the location basedir where the lambda layers used by the template will be downloaded to."
                },
                "skip_pull_image": {
                  "title": "skip_pull_image",
                  "type": "boolean",
                  "description": "Skip pulling down the latest Docker image for Lambda runtime."
                },
                "docker_network": {
                  "title": "docker_network",
                  "type": "string",
                  "description": "Name or ID of an existing docker network for AWS Lambda docker containers to connect to, along with the default bridge network. If not specified, the Lambda containers will only connect to the default bridge docker network."
                },
                "force_image_build": {
                  "title": "force_image_build",
                  "type": "boolean",
                  "description": "Force rebuilding the image used for invoking functions with layers."
                },
                "shutdown": {
                  "title": "shutdown",
                  "type": "boolean",
                  "description": "Emulate a shutdown event after invoke completes, to test extension handling of shutdown behavior."
                },
                "container_host": {
                  "title": "container_host",
                  "type": "string",
                  "description": "Host of locally emulated Lambda container. This option is useful when the container runs on a different host than AWS SAM CLI. For example, if one wants to run AWS SAM CLI in a Docker container on macOS, this option could specify `host.docker.internal`",
                  "default": "localhost"
                },
                "container_host_interface": {
                  "title": "container_host_interface",
                  "type": "string",
                  "description": "IP address of the host network interface that container ports should bind to. Use 0.0.0.0 to bind to all interfaces.",
                  "default": "127.0.0.1"
                },
                "invoke_image": {
                  "title": "invoke_image",
                  "type": "string",
                  "description": "Container image URIs for invoking functions or starting api and function. One can specify the image URI used for the local function invocation (--invoke-image public.ecr.aws/sam/build-nodejs14.x:latest). One can also specify for each individual function with (--invoke-image Function1=public.ecr.aws/sam/build-nodejs14.x:latest). If a function does not have invoke image specified, the default AWS SAM CLI emulation image will be used."
                },
                "beta_features": {
                  "title": "beta_features",
                  "type": "boolean",
                  "description": "Enable/Disable beta features."
                },
                "debug": {
                  "title": "debug",
                  "type": "boolean",
                  "description": "Turn on debug logging to print debug message generated by AWS SAM CLI and display timestamps."
                },
                "profile": {
                  "title": "profile",
                  "type": "string",
                  "description": "Select a specific profile from your credential file to get AWS credentials."
                },
                "region": {
                  "title": "region",
                  "type": "string",
                  "description": "Set the AWS Region of the service. (e.g. us-east-1)"
                }
              }
            }
          },
          "required": [
            "parameters"
          ]
        },
        "local_start_api": {
          "title": "Local Start Api command",
          "description": "Run & test AWS serverless functions locally as a HTTP API.",
          "properties": {
            "parameters": {
              "title": "Parameters for the local start api command",
              "description": "Available parameters for the local start api command:\n* hook_name:\nHook package id to extend AWS SAM CLI commands functionality. \n\nExample: `terraform` to extend AWS SAM CLI commands functionality to support terraform applications. \n\nAvailable Hook Names: ['terraform']\n* skip_prepare_infra:\nSkip preparation stage when there are no infrastructure changes. Only used in conjunction with --hook-name.\n* host:\nLocal hostname or IP address to bind to (default: '127.0.0.1')\n* port:\nLocal port number to listen on (default: '3000')\n* static_dir:\nAny static assets (e.g. CSS/Javascript/HTML) files located in this directory will be presented at /\n* template_file:\nAWS SAM template which references built artifacts for resources in the template. (if applicable)\n* env_vars:\nJSON file containing values for Lambda function's environment variables.\n* parameter_overrides:\nString that contains AWS CloudFormation parameter overrides encoded as key=value pairs.\n* debug_port:\nWhen specified, Lambda function container will start in debug mode and will expose this port on localhost.\n* debugger_path:\nHost path to a debugger that will be mounted into the Lambda container.\n* debug_args:\nAdditional arguments to be passed to the debugger.\n* container_env_vars:\nJSON file containing environment variables to be set within the container environment\n* docker_volume_basedir:\nSpecify the location basedir where the SAM template exists. If Docker is running on a remote machine, Path of the SAM template must be mounted on the Docker machine and modified to match the remote machine.\n* log_file:\nFile to capture output logs.\n* layer_cache_basedir:\nSpecify the location basedir where the lambda layers used by the template will be downloaded to.\n* skip_pull_image:\nSkip pulling down the latest Docker image for Lambda runtime.\n* docker_network:\nName or ID of an existing docker network for AWS Lambda docker containers to connect to, along with the default bridge network. If not specified, the Lambda containers will only connect to the default bridge docker network.\n* force_image_build:\nForce rebuilding the image used for invoking functions with layers.\n* warm_containers:\nOptional. Specifies how AWS SAM CLI manages \ncontainers for each function.\nTwo modes are available:\nEAGER: Containers for all functions are \nloaded at startup and persist between \ninvocations.\nLAZY:  Containers are only loaded when each \nfunction is first invoked. Those containers \npersist for additional invocations.\n* debug_function:\nOptional. Specifies the Lambda Function logicalId to apply debug options to when --warm-containers is specified. This parameter applies to --debug-port, --debugger-path, and --debug-args.\n* shutdown:\nEmulate a shutdown event after invoke completes, to test extension handling of shutdown behavior.\n* container_host:\nHost of locally emulated Lambda container. This option is useful when the container runs on a different host than AWS SAM CLI. For example, if one wants to run AWS SAM CLI in a Docker container on macOS, this option could specify `host.docker.internal`\n* container_host_interface:\nIP address of the host network interface that container ports should bind to. Use 0.0.0.0 to bind to all interfaces.\n* invoke_image:\nContainer image URIs for invoking functions or starting api and function. One can specify the image URI used for the local function invocation (--invoke-image public.ecr.aws/sam/build-nodejs14.x:latest). One can also specify for each individual function with (--invoke-image Function1=public.ecr.aws/sam/build-nodejs14.x:latest). If a function does not have invoke image specified, the default AWS SAM CLI emulation image will be used.\n* beta_features:\nEnable/Disable beta features.\n* debug:\nTurn on debug logging to print debug message generated by AWS SAM CLI and display timestamps.\n* profile:\nSelect a specific profile from your credential file to get AWS credentials.\n* region:\nSet the AWS Region of the service. (e.g. us-east-1)",
              "type": "object",
              "properties": {
                "hook_name": {
                  "title": "hook_name",
                  "type": "string",
                  "description": "Hook package id to extend AWS SAM CLI commands functionality. \n\nExample: `terraform` to extend AWS SAM CLI commands functionality to support terraform applications. \n\nAvailable Hook Names: ['terraform']"
                },
                "skip_prepare_infra": {
                  "title": "skip_prepare_infra",
                  "type": "boolean",
                  "description": "Skip preparation stage when there are no infrastructure changes. Only used in conjunction with --hook-name."
                },
                "host": {
                  "title": "host",
                  "type": "string",
                  "description": "Local hostname or IP address to bind to (default: '127.0.0.1')",
                  "default": "127.0.0.1"
                },
                "port": {
                  "title": "port",
                  "type": "integer",
                  "description": "Local port number to listen on (default: '3000')",
                  "default": 3000
                },
                "static_dir": {
                  "title": "static_dir",
                  "type": "string",
                  "description": "Any static assets (e.g. CSS/Javascript/HTML) files located in this directory will be presented at /",
                  "default": "public"
                },
                "template_file": {
                  "title": "template_file",
                  "type": "string",
                  "description": "AWS SAM template which references built artifacts for resources in the template. (if applicable)",
                  "default": "template.[yaml|yml|json]"
                },
                "env_vars": {
                  "title": "env_vars",
                  "type": "string",
                  "description": "JSON file containing values for Lambda function's environment variables."
                },
                "parameter_overrides": {
                  "title": "parameter_overrides",
                  "type": "string",
                  "description": "String that contains AWS CloudFormation parameter overrides encoded as key=value pairs."
                },
                "debug_port": {
                  "title": "debug_port",
                  "type": "integer",
                  "description": "When specified, Lambda function container will start in debug mode and will expose this port on localhost."
                },
                "debugger_path": {
                  "title": "debugger_path",
                  "type": "string",
                  "description": "Host path to a debugger that will be mounted into the Lambda container."
                },
                "debug_args": {
                  "title": "debug_args",
                  "type": "string",
                  "description": "Additional arguments to be passed to the debugger."
                },
                "container_env_vars": {
                  "title": "container_env_vars",
                  "type": "string",
                  "description": "JSON file containing environment variables to be set within the container environment"
                },
                "docker_volume_basedir": {
                  "title": "docker_volume_basedir",
                  "type": "string",
                  "description": "Specify the location basedir where the SAM template exists. If Docker is running on a remote machine, Path of the SAM template must be mounted on the Docker machine and modified to match the remote machine."
                },
                "log_file": {
                  "title": "log_file",
                  "type": "string",
                  "description": "File to capture output logs."
                },
                "layer_cache_basedir": {
                  "title": "layer_cache_basedir",
                  "type": "string",
                  "description": "Specify the location basedir where the lambda layers used by the template will be downloaded to."
                },
                "skip_pull_image": {
                  "title": "skip_pull_image",
                  "type": "boolean",
                  "description": "Skip pulling down the latest Docker image for Lambda runtime."
                },
                "docker_network": {
                  "title": "docker_network",
                  "type": "string",
                  "description": "Name or ID of an existing docker network for AWS Lambda docker containers to connect to, along with the default bridge network. If not specified, the Lambda containers will only connect to the default bridge docker network."
                },
                "force_image_build": {
                  "title": "force_image_build",
                  "type": "boolean",
                  "description": "Force rebuilding the image used for invoking functions with layers."
                },
                "warm_containers": {
                  "title": "warm_containers",
                  "type": "string",
                  "description": "Optional. Specifies how AWS SAM CLI manages \ncontainers for each function.\nTwo modes are available:\nEAGER: Containers for all functions are \nloaded at startup and persist between \ninvocations.\nLAZY:  Containers are only loaded when each \nfunction is first invoked. Those containers \npersist for additional invocations.",
                  "enum": [
                    "EAGER",
                    "LAZY"
                  ]
                },
                "debug_function": {
                  "title": "debug_function",
                  "type": "string",
                  "description": "Optional. Specifies the Lambda Function logicalId to apply debug options to when --warm-containers is specified. This parameter applies to --debug-port, --debugger-path, and --debug-args."
                },
                "shutdown": {
                  "title": "shutdown",
                  "type": "boolean",
                  "description": "Emulate a shutdown event after invoke completes, to test extension handling of shutdown behavior."
                },
                "container_host": {
                  "title": "container_host",
                  "type": "string",
                  "description": "Host of locally emulated Lambda container. This option is useful when the container runs on a different host than AWS SAM CLI. For example, if one wants to run AWS SAM CLI in a Docker container on macOS, this option could specify `host.docker.internal`",
                  "default": "localhost"
                },
                "container_host_interface": {
                  "title": "container_host_interface",
                  "type": "string",
                  "description": "IP address of the host network interface that container ports should bind to. Use 0.0.0.0 to bind to all interfaces.",
                  "default": "127.0.0.1"
                },
                "invoke_image": {
                  "title": "invoke_image",
                  "type": "string",
                  "description": "Container image URIs for invoking functions or starting api and function. One can specify the image URI used for the local function invocation (--invoke-image public.ecr.aws/sam/build-nodejs14.x:latest). One can also specify for each individual function with (--invoke-image Function1=public.ecr.aws/sam/build-nodejs14.x:latest). If a function does not have invoke image specified, the default AWS SAM CLI emulation image will be used."
                },
                "beta_features": {
                  "title": "beta_features",
                  "type": "boolean",
                  "description": "Enable/Disable beta features."
                },
                "debug": {
                  "title": "debug",
                  "type": "boolean",
                  "description": "Turn on debug logging to print debug message generated by AWS SAM CLI and display timestamps."
                },
                "profile": {
                  "title": "profile",
                  "type": "string",
                  "description": "Select a specific profile from your credential file to get AWS credentials."
                },
                "region": {
                  "title": "region",
                  "type": "string",
                  "description": "Set the AWS Region of the service. (e.g. us-east-1)"
                }
              }
            }
          },
          "required": [
            "parameters"
          ]
        },
        "local_generate_event": {
          "title": "Local Generate Event command",
          "description": "Generate events for Lambda functions.",
          "properties": {
            "parameters": {
              "title": "Parameters for the local generate event command",
              "description": "Available parameters for the local generate event command:\n* ",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "local_start_lambda": {
          "title": "Local Start Lambda command",
          "description": "Emulate AWS serverless functions locally.",
          "properties": {
            "parameters": {
              "title": "Parameters for the local start lambda command",
              "description": "Available parameters for the local start lambda command:\n* hook_name:\nHook package id to extend AWS SAM CLI commands functionality. \n\nExample: `terraform` to extend AWS SAM CLI commands functionality to support terraform applications. \n\nAvailable Hook Names: ['terraform']\n* skip_prepare_infra:\nSkip preparation stage when there are no infrastructure changes. Only used in conjunction with --hook-name.\n* host:\nLocal hostname or IP address to bind to (default: '127.0.0.1')\n* port:\nLocal port number to listen on (default: '3001')\n* template_file:\nAWS SAM template which references built artifacts for resources in the template. (if applicable)\n* env_vars:\nJSON file containing values for Lambda function's environment variables.\n* parameter_overrides:\nString that contains AWS CloudFormation parameter overrides encoded as key=value pairs.\n* debug_port:\nWhen specified, Lambda function container will start in debug mode and will expose this port on localhost.\n* debugger_path:\nHost path to a debugger that will be mounted into the Lambda container.\n* debug_args:\nAdditional arguments to be passed to the debugger.\n* container_env_vars:\nJSON file containing environment variables to be set within the container environment\n* docker_volume_basedir:\nSpecify the location basedir where the SAM template exists. If Docker is running on a remote machine, Path of the SAM template must be mounted on the Docker machine and modified to match the remote machine.\n* log_file:\nFile to capture output logs.\n* layer_cache_basedir:\nSpecify the location basedir where the lambda layers used by the template will be downloaded to.\n* skip_pull_image:\nSkip pulling down the latest Docker image for Lambda runtime.\n* docker_network:\nName or ID of an existing docker network for AWS Lambda docker containers to connect to, along with the default bridge network. If not specified, the Lambda containers will only connect to the default bridge docker network.\n* force_image_build:\nForce rebuilding the image used for invoking functions with layers.\n* warm_containers:\nOptional. Specifies how AWS SAM CLI manages \ncontainers for each function.\nTwo modes are available:\nEAGER: Containers for all functions are \nloaded at startup and persist between \ninvocations.\nLAZY:  Containers are only loaded when each \nfunction is first invoked. Those containers \npersist for additional invocations.\n* debug_function:\nOptional. Specifies the Lambda Function logicalId to apply debug options to when --warm-containers is specified. This parameter applies to --debug-port, --debugger-path, and --debug-args.\n* shutdown:\nEmulate a shutdown event after invoke completes, to test extension handling of shutdown behavior.\n* container_host:\nHost of locally emulated Lambda container. This option is useful when the container runs on a different host than AWS SAM CLI. For example, if one wants to run AWS SAM CLI in a Docker container on macOS, this option could specify `host.docker.internal`\n* container_host_interface:\nIP address of the host network interface that container ports should bind to. Use 0.0.0.0 to bind to all interfaces.\n* invoke_image:\nContainer image URIs for invoking functions or starting api and function. One can specify the image URI used for the local function invocation (--invoke-image public.ecr.aws/sam/build-nodejs14.x:latest). One can also specify for each individual function with (--invoke-image Function1=public.ecr.aws/sam/build-nodejs14.x:latest). If a function does not have invoke image specified, the default AWS SAM CLI emulation image will be used.\n* beta_features:\nEnable/Disable beta features.\n* debug:\nTurn on debug logging to print debug message generated by AWS SAM CLI and display timestamps.\n* profile:\nSelect a specific profile from your credential file to get AWS credentials.\n* region:\nSet the AWS Region of the service. (e.g. us-east-1)",
              "type": "object",
              "properties": {
                "hook_name": {
                  "title": "hook_name",
                  "type": "string",
                  "description": "Hook package id to extend AWS SAM CLI commands functionality. \n\nExample: `terraform` to extend AWS SAM CLI commands functionality to support terraform applications. \n\nAvailable Hook Names: ['terraform']"
                },
                "skip_prepare_infra": {
                  "title": "skip_prepare_infra",
                  "type": "boolean",
                  "description": "Skip preparation stage when there are no infrastructure changes. Only used in conjunction with --hook-name."
                },
                "host": {
                  "title": "host",
                  "type": "string",
                  "description": "Local hostname or IP address to bind to (default: '127.0.0.1')",
                  "default": "127.0.0.1"
                },
                "port": {
                  "title": "port",
                  "type": "integer",
                  "description": "Local port number to listen on (default: '3001')",
                  "default": 3001
                },
                "template_file": {
                  "title": "template_file",
                  "type": "string",
                  "description": "AWS SAM template which references built artifacts for resources in the template. (if applicable)",
                  "default": "template.[yaml|yml|json]"
                },
                "env_vars": {
                  "title": "env_vars",
                  "type": "string",
                  "description": "JSON file containing values for Lambda function's environment variables."
                },
                "parameter_overrides": {
                  "title": "parameter_overrides",
                  "type": "string",
                  "description": "String that contains AWS CloudFormation parameter overrides encoded as key=value pairs."
                },
                "debug_port": {
                  "title": "debug_port",
                  "type": "integer",
                  "description": "When specified, Lambda function container will start in debug mode and will expose this port on localhost."
                },
                "debugger_path": {
                  "title": "debugger_path",
                  "type": "string",
                  "description": "Host path to a debugger that will be mounted into the Lambda container."
                },
                "debug_args": {
                  "title": "debug_args",
                  "type": "string",
                  "description": "Additional arguments to be passed to the debugger."
                },
                "container_env_vars": {
                  "title": "container_env_vars",
                  "type": "string",
                  "description": "JSON file containing environment variables to be set within the container environment"
                },
                "docker_volume_basedir": {
                  "title": "docker_volume_basedir",
                  "type": "string",
                  "description": "Specify the location basedir where the SAM template exists. If Docker is running on a remote machine, Path of the SAM template must be mounted on the Docker machine and modified to match the remote machine."
                },
                "log_file": {
                  "title": "log_file",
                  "type": "string",
                  "description": "File to capture output logs."
                },
                "layer_cache_basedir": {
                  "title": "layer_cache_basedir",
                  "type": "string",
                  "description": "Specify the location basedir where the lambda layers used by the template will be downloaded to."
                },
                "skip_pull_image": {
                  "title": "skip_pull_image",
                  "type": "boolean",
                  "description": "Skip pulling down the latest Docker image for Lambda runtime."
                },
                "docker_network": {
                  "title": "docker_network",
                  "type": "string",
                  "description": "Name or ID of an existing docker network for AWS Lambda docker containers to connect to, along with the default bridge network. If not specified, the Lambda containers will only connect to the default bridge docker network."
                },
                "force_image_build": {
                  "title": "force_image_build",
                  "type": "boolean",
                  "description": "Force rebuilding the image used for invoking functions with layers."
                },
                "warm_containers": {
                  "title": "warm_containers",
                  "type": "string",
                  "description": "Optional. Specifies how AWS SAM CLI manages \ncontainers for each function.\nTwo modes are available:\nEAGER: Containers for all functions are \nloaded at startup and persist between \ninvocations.\nLAZY:  Containers are only loaded when each \nfunction is first invoked. Those containers \npersist for additional invocations.",
                  "enum": [
                    "EAGER",
                    "LAZY"
                  ]
                },
                "debug_function": {
                  "title": "debug_function",
                  "type": "string",
                  "description": "Optional. Specifies the Lambda Function logicalId to apply debug options to when --warm-containers is specified. This parameter applies to --debug-port, --debugger-path, and --debug-args."
                },
                "shutdown": {
                  "title": "shutdown",
                  "type": "boolean",
                  "description": "Emulate a shutdown event after invoke completes, to test extension handling of shutdown behavior."
                },
                "container_host": {
                  "title": "container_host",
                  "type": "string",
                  "description": "Host of locally emulated Lambda container. This option is useful when the container runs on a different host than AWS SAM CLI. For example, if one wants to run AWS SAM CLI in a Docker container on macOS, this option could specify `host.docker.internal`",
                  "default": "localhost"
                },
                "container_host_interface": {
                  "title": "container_host_interface",
                  "type": "string",
                  "description": "IP address of the host network interface that container ports should bind to. Use 0.0.0.0 to bind to all interfaces.",
                  "default": "127.0.0.1"
                },
                "invoke_image": {
                  "title": "invoke_image",
                  "type": "string",
                  "description": "Container image URIs for invoking functions or starting api and function. One can specify the image URI used for the local function invocation (--invoke-image public.ecr.aws/sam/build-nodejs14.x:latest). One can also specify for each individual function with (--invoke-image Function1=public.ecr.aws/sam/build-nodejs14.x:latest). If a function does not have invoke image specified, the default AWS SAM CLI emulation image will be used."
                },
                "beta_features": {
                  "title": "beta_features",
                  "type": "boolean",
                  "description": "Enable/Disable beta features."
                },
                "debug": {
                  "title": "debug",
                  "type": "boolean",
                  "description": "Turn on debug logging to print debug message generated by AWS SAM CLI and display timestamps."
                },
                "profile": {
                  "title": "profile",
                  "type": "string",
                  "description": "Select a specific profile from your credential file to get AWS credentials."
                },
                "region": {
                  "title": "region",
                  "type": "string",
                  "description": "Set the AWS Region of the service. (e.g. us-east-1)"
                }
              }
            }
          },
          "required": [
            "parameters"
          ]
        },
        "package": {
          "title": "Package command",
          "description": "Package an AWS SAM application.",
          "properties": {
            "parameters": {
              "title": "Parameters for the package command",
              "description": "Available parameters for the package command:\n* template_file:\nAWS SAM template which references built artifacts for resources in the template. (if applicable)\n* output_template_file:\nThe path to the file where the command writes the output AWS CloudFormation template. If you don't specify a path, the command writes the template to the standard output.\n* s3_bucket:\nAWS S3 bucket where artifacts referenced in the template are uploaded.\n* image_repository:\nAWS ECR repository URI where artifacts referenced in the template are uploaded.\n* image_repositories:\nMapping of Function Logical ID to AWS ECR Repository URI.\n\nExample: Function_Logical_ID=ECR_Repo_Uri\nThis option can be specified multiple times.\n* s3_prefix:\nPrefix name that is added to the artifact's name when it is uploaded to the AWS S3 bucket.\n* kms_key_id:\nThe ID of an AWS KMS key that is used to encrypt artifacts that are at rest in the AWS S3 bucket.\n* use_json:\nIndicates whether to use JSON as the format for the output AWS CloudFormation template. YAML is used by default.\n* force_upload:\nIndicates whether to override existing files in the S3 bucket. Specify this flag to upload artifacts even if they match existing artifacts in the S3 bucket.\n* resolve_s3:\nAutomatically resolve AWS S3 bucket for non-guided deployments. Enabling this option will also create a managed default AWS S3 bucket for you. If one does not provide a --s3-bucket value, the managed bucket will be used. Do not use --guided with this option.\n* metadata:\nMap of metadata to attach to ALL the artifacts that are referenced in the template.\n* signing_profiles:\nA string that contains Code Sign configuration parameters as FunctionOrLayerNameToSign=SigningProfileName:SigningProfileOwner Since signing profile owner is optional, it could also be written as FunctionOrLayerNameToSign=SigningProfileName\n* no_progressbar:\nDoes not showcase a progress bar when uploading artifacts to S3 and pushing docker images to ECR\n* beta_features:\nEnable/Disable beta features.\n* debug:\nTurn on debug logging to print debug message generated by AWS SAM CLI and display timestamps.\n* profile:\nSelect a specific profile from your credential file to get AWS credentials.\n* region:\nSet the AWS Region of the service. (e.g. us-east-1)",
              "type": "object",
              "properties": {
                "template_file": {
                  "title": "template_file",
                  "type": "string",
                  "description": "AWS SAM template which references built artifacts for resources in the template. (if applicable)",
                  "default": "template.[yaml|yml|json]"
                },
                "output_template_file": {
                  "title": "output_template_file",
                  "type": "string",
                  "description": "The path to the file where the command writes the output AWS CloudFormation template. If you don't specify a path, the command writes the template to the standard output."
                },
                "s3_bucket": {
                  "title": "s3_bucket",
                  "type": "string",
                  "description": "AWS S3 bucket where artifacts referenced in the template are uploaded."
                },
                "image_repository": {
                  "title": "image_repository",
                  "type": "string",
                  "description": "AWS ECR repository URI where artifacts referenced in the template are uploaded."
                },
                "image_repositories": {
                  "title": "image_repositories",
                  "type": "string",
                  "description": "Mapping of Function Logical ID to AWS ECR Repository URI.\n\nExample: Function_Logical_ID=ECR_Repo_Uri\nThis option can be specified multiple times."
                },
                "s3_prefix": {
                  "title": "s3_prefix",
                  "type": "string",
                  "description": "Prefix name that is added to the artifact's name when it is uploaded to the AWS S3 bucket."
                },
                "kms_key_id": {
                  "title": "kms_key_id",
                  "type": "string",
                  "description": "The ID of an AWS KMS key that is used to encrypt artifacts that are at rest in the AWS S3 bucket."
                },
                "use_json": {
                  "title": "use_json",
                  "type": "boolean",
                  "description": "Indicates whether to use JSON as the format for the output AWS CloudFormation template. YAML is used by default."
                },
                "force_upload": {
                  "title": "force_upload",
                  "type": "boolean",
                  "description": "Indicates whether to override existing files in the S3 bucket. Specify this flag to upload artifacts even if they match existing artifacts in the S3 bucket."
                },
                "resolve_s3": {
                  "title": "resolve_s3",
                  "type": "boolean",
                  "description": "Automatically resolve AWS S3 bucket for non-guided deployments. Enabling this option will also create a managed default AWS S3 bucket for you. If one does not provide a --s3-bucket value, the managed bucket will be used. Do not use --guided with this option."
                },
                "metadata": {
                  "title": "metadata",
                  "type": "string",
                  "description": "Map of metadata to attach to ALL the artifacts that are referenced in the template."
                },
                "signing_profiles": {
                  "title": "signing_profiles",
                  "type": "string",
                  "description": "A string that contains Code Sign configuration parameters as FunctionOrLayerNameToSign=SigningProfileName:SigningProfileOwner Since signing profile owner is optional, it could also be written as FunctionOrLayerNameToSign=SigningProfileName"
                },
                "no_progressbar": {
                  "title": "no_progressbar",
                  "type": "boolean",
                  "description": "Does not showcase a progress bar when uploading artifacts to S3 and pushing docker images to ECR"
                },
                "beta_features": {
                  "title": "beta_features",
                  "type": "boolean",
                  "description": "Enable/Disable beta features."
                },
                "debug": {
                  "title": "debug",
                  "type": "boolean",
                  "description": "Turn on debug logging to print debug message generated by AWS SAM CLI and display timestamps."
                },
                "profile": {
                  "title": "profile",
                  "type": "string",
                  "description": "Select a specific profile from your credential file to get AWS credentials."
                },
                "region": {
                  "title": "region",
                  "type": "string",
                  "description": "Set the AWS Region of the service. (e.g. us-east-1)"
                }
              }
            }
          },
          "required": [
            "parameters"
          ]
        },
        "deploy": {
          "title": "Deploy command",
          "description": "The sam deploy command creates a Cloudformation Stack and deploys your resources.",
          "properties": {
            "parameters": {
              "title": "Parameters for the deploy command",
              "description": "Available parameters for the deploy command:\n* guided:\nSpecify this flag to allow SAM CLI to guide you through the deployment using guided prompts.\n* template_file:\nAWS SAM template which references built artifacts for resources in the template. (if applicable)\n* no_execute_changeset:\nIndicates whether to execute the change set. Specify this flag to view stack changes before executing the change set.\n* fail_on_empty_changeset:\nSpecify whether AWS SAM CLI should return a non-zero exit code if there are no changes to be made to the stack. Defaults to a non-zero exit code.\n* confirm_changeset:\nPrompt to confirm if the computed changeset is to be deployed by SAM CLI.\n* disable_rollback:\nPreserves the state of previously provisioned resources when an operation fails.\n* on_failure:\nProvide an action to determine what will happen when a stack fails to create. Three actions are available:\n\n- ROLLBACK: This will rollback a stack to a previous known good state.\n\n- DELETE: The stack will rollback to a previous state if one exists, otherwise the stack will be deleted.\n\n- DO_NOTHING: The stack will not rollback or delete, this is the same as disabling rollback.\n\nDefault behaviour is ROLLBACK.\n\n\n\nThis option is mutually exclusive with --disable-rollback/--no-disable-rollback. You can provide\n--on-failure or --disable-rollback/--no-disable-rollback but not both at the same time.\n* stack_name:\nName of the AWS CloudFormation stack.\n* s3_bucket:\nAWS S3 bucket where artifacts referenced in the template are uploaded.\n* image_repository:\nAWS ECR repository URI where artifacts referenced in the template are uploaded.\n* image_repositories:\nMapping of Function Logical ID to AWS ECR Repository URI.\n\nExample: Function_Logical_ID=ECR_Repo_Uri\nThis option can be specified multiple times.\n* force_upload:\nIndicates whether to override existing files in the S3 bucket. Specify this flag to upload artifacts even if they match existing artifacts in the S3 bucket.\n* s3_prefix:\nPrefix name that is added to the artifact's name when it is uploaded to the AWS S3 bucket.\n* kms_key_id:\nThe ID of an AWS KMS key that is used to encrypt artifacts that are at rest in the AWS S3 bucket.\n* role_arn:\nARN of an IAM role that AWS Cloudformation assumes when executing a deployment change set.\n* use_json:\nIndicates whether to use JSON as the format for the output AWS CloudFormation template. YAML is used by default.\n* resolve_s3:\nAutomatically resolve AWS S3 bucket for non-guided deployments. Enabling this option will also create a managed default AWS S3 bucket for you. If one does not provide a --s3-bucket value, the managed bucket will be used. Do not use --guided with this option.\n* resolve_image_repos:\nAutomatically create and delete ECR repositories for image-based functions in non-guided deployments. A companion stack containing ECR repos for each function will be deployed along with the template stack. Automatically created image repositories will be deleted if the corresponding functions are removed.\n* metadata:\nMap of metadata to attach to ALL the artifacts that are referenced in the template.\n* notification_arns:\nARNs of SNS topics that AWS Cloudformation associates with the stack.\n* tags:\nList of tags to associate with the stack.\n* parameter_overrides:\nString that contains AWS CloudFormation parameter overrides encoded as key=value pairs.\n* signing_profiles:\nA string that contains Code Sign configuration parameters as FunctionOrLayerNameToSign=SigningProfileName:SigningProfileOwner Since signing profile owner is optional, it could also be written as FunctionOrLayerNameToSign=SigningProfileName\n* no_progressbar:\nDoes not showcase a progress bar when uploading artifacts to S3 and pushing docker images to ECR\n* capabilities:\nList of capabilities that one must specify before AWS Cloudformation can create certain stacks.\n\nAccepted Values: CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_RESOURCE_POLICY, CAPABILITY_AUTO_EXPAND.\n\nLearn more at: https://docs.aws.amazon.com/serverlessrepo/latest/devguide/acknowledging-application-capabilities.html\n* profile:\nSelect a specific profile from your credential file to get AWS credentials.\n* region:\nSet the AWS Region of the service. (e.g. us-east-1)\n* beta_features:\nEnable/Disable beta features.\n* debug:\nTurn on debug logging to print debug message generated by AWS SAM CLI and display timestamps.",
              "type": "object",
              "properties": {
                "guided": {
                  "title": "guided",
                  "type": "boolean",
                  "description": "Specify this flag to allow SAM CLI to guide you through the deployment using guided prompts."
                },
                "template_file": {
                  "title": "template_file",
                  "type": "string",
                  "description": "AWS SAM template which references built artifacts for resources in the template. (if applicable)",
                  "default": "template.[yaml|yml|json]"
                },
                "no_execute_changeset": {
                  "title": "no_execute_changeset",
                  "type": "boolean",
                  "description": "Indicates whether to execute the change set. Specify this flag to view stack changes before executing the change set."
                },
                "fail_on_empty_changeset": {
                  "title": "fail_on_empty_changeset",
                  "type": "boolean",
                  "description": "Specify whether AWS SAM CLI should return a non-zero exit code if there are no changes to be made to the stack. Defaults to a non-zero exit code.",
                  "default": true
                },
                "confirm_changeset": {
                  "title": "confirm_changeset",
                  "type": "boolean",
                  "description": "Prompt to confirm if the computed changeset is to be deployed by SAM CLI."
                },
                "disable_rollback": {
                  "title": "disable_rollback",
                  "type": "boolean",
                  "description": "Preserves the state of previously provisioned resources when an operation fails."
                },
                "on_failure": {
                  "title": "on_failure",
                  "type": "string",
                  "description": "Provide an action to determine what will happen when a stack fails to create. Three actions are available:\n\n- ROLLBACK: This will rollback a stack to a previous known good state.\n\n- DELETE: The stack will rollback to a previous state if one exists, otherwise the stack will be deleted.\n\n- DO_NOTHING: The stack will not rollback or delete, this is the same as disabling rollback.\n\nDefault behaviour is ROLLBACK.\n\n\n\nThis option is mutually exclusive with --disable-rollback/--no-disable-rollback. You can provide\n--on-failure or --disable-rollback/--no-disable-rollback but not both at the same time.",
                  "default": "ROLLBACK",
                  "enum": [
                    "ROLLBACK",
                    "DELETE",
                    "DO_NOTHING"
                  ]
                },
                "stack_name": {
                  "title": "stack_name",
                  "type": "string",
                  "description": "Name of the AWS CloudFormation stack."
                },
                "s3_bucket": {
                  "title": "s3_bucket",
                  "type": "string",
                  "description": "AWS S3 bucket where artifacts referenced in the template are uploaded."
                },
                "image_repository": {
                  "title": "image_repository",
                  "type": "string",
                  "description": "AWS ECR repository URI where artifacts referenced in the template are uploaded."
                },
                "image_repositories": {
                  "title": "image_repositories",
                  "type": "string",
                  "description": "Mapping of Function Logical ID to AWS ECR Repository URI.\n\nExample: Function_Logical_ID=ECR_Repo_Uri\nThis option can be specified multiple times."
                },
                "force_upload": {
                  "title": "force_upload",
                  "type": "boolean",
                  "description": "Indicates whether to override existing files in the S3 bucket. Specify this flag to upload artifacts even if they match existing artifacts in the S3 bucket."
                },
                "s3_prefix": {
                  "title": "s3_prefix",
                  "type": "string",
                  "description": "Prefix name that is added to the artifact's name when it is uploaded to the AWS S3 bucket."
                },
                "kms_key_id": {
                  "title": "kms_key_id",
                  "type": "string",
                  "description": "The ID of an AWS KMS key that is used to encrypt artifacts that are at rest in the AWS S3 bucket."
                },
                "role_arn": {
                  "title": "role_arn",
                  "type": "string",
                  "description": "ARN of an IAM role that AWS Cloudformation assumes when executing a deployment change set."
                },
                "use_json": {
                  "title": "use_json",
                  "type": "boolean",
                  "description": "Indicates whether to use JSON as the format for the output AWS CloudFormation template. YAML is used by default."
                },
                "resolve_s3": {
                  "title": "resolve_s3",
                  "type": "boolean",
                  "description": "Automatically resolve AWS S3 bucket for non-guided deployments. Enabling this option will also create a managed default AWS S3 bucket for you. If one does not provide a --s3-bucket value, the managed bucket will be used. Do not use --guided with this option."
                },
                "resolve_image_repos": {
                  "title": "resolve_image_repos",
                  "type": "boolean",
                  "description": "Automatically create and delete ECR repositories for image-based functions in non-guided deployments. A companion stack containing ECR repos for each function will be deployed along with the template stack. Automatically created image repositories will be deleted if the corresponding functions are removed."
                },
                "metadata": {
                  "title": "metadata",
                  "type": "string",
                  "description": "Map of metadata to attach to ALL the artifacts that are referenced in the template."
                },
                "notification_arns": {
                  "title": "notification_arns",
                  "type": "array",
                  "description": "ARNs of SNS topics that AWS Cloudformation associates with the stack.",
                  "items": {
                    "type": "string"
                  }
                },
                "tags": {
                  "title": "tags",
                  "type": "string",
                  "description": "List of tags to associate with the stack."
                },
                "parameter_overrides": {
                  "title": "parameter_overrides",
                  "type": "string",
                  "description": "String that contains AWS CloudFormation parameter overrides encoded as key=value pairs."
                },
                "signing_profiles": {
                  "title": "signing_profiles",
                  "type": "string",
                  "description": "A string that contains Code Sign configuration parameters as FunctionOrLayerNameToSign=SigningProfileName:SigningProfileOwner Since signing profile owner is optional, it could also be written as FunctionOrLayerNameToSign=SigningProfileName"
                },
                "no_progressbar": {
                  "title": "no_progressbar",
                  "type": "boolean",
                  "description": "Does not showcase a progress bar when uploading artifacts to S3 and pushing docker images to ECR"
                },
                "capabilities": {
                  "title": "capabilities",
                  "type": "array",
                  "description": "List of capabilities that one must specify before AWS Cloudformation can create certain stacks.\n\nAccepted Values: CAPABILITY_IAM, CAPABILITY_NAMED_IAM, CAPABILITY_RESOURCE_POLICY, CAPABILITY_AUTO_EXPAND.\n\nLearn more at: https://docs.aws.amazon.com/serverlessrepo/latest/devguide/acknowledging-application-capabilities.html",
                  "items": {
                    "type": "string"
                  }
                },
                "profile": {
                  "title": "profile",
                  "type": "string",
                  "description": "Select a specific profile from your credential file to get AWS credentials."
                },
                "region": {
                  "title": "region",
                  "type": "string",
                  "description": "Set the AWS Region of the service. (e.g. us-east-1)"
                },
                "beta_features": {
                  "title": "beta_features",
                  "type": "boolean",
                  "description": "Enable/Disable beta features."
                },
                "debug": {
                  "title": "debug",
                  "type": "boolean",
                  "description": "Turn on debug logging to print debug message generated by AWS SAM CLI and display timestamps."
                }
              }
            }
          },
          "required": [
            "parameters"
          ]
        },
        "delete": {
          "title": "Delete command",
          "description": "The sam delete command deletes the CloudFormation\nstack and all the artifacts which were created using sam deploy.\n\n\ne.g. sam delete",
          "properties": {
            "parameters": {
              "title": "Parameters for the delete command",
              "description": "Available parameters for the delete command:\n",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "logs": {
          "title": "Logs command",
          "description": "The sam logs commands fetches logs of Lambda Functions/CloudWatch log groups\nwith additional filtering by options.",
          "properties": {
            "parameters": {
              "title": "Parameters for the logs command",
              "description": "Available parameters for the logs command:\n",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "publish": {
          "title": "Publish command",
          "description": "Use this command to publish a packaged AWS SAM template to\nthe AWS Serverless Application Repository to share within your team,\nacross your organization, or with the community at large.\n\n\nThis command expects the template's Metadata section to contain an\nAWS::ServerlessRepo::Application section with application metadata\nfor publishing. For more details on this metadata section, see\nhttps://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-publishing-applications.html\n\nExamples\n--------\nTo publish an application\n$ sam publish -t packaged.yaml --region <region>",
          "properties": {
            "parameters": {
              "title": "Parameters for the publish command",
              "description": "Available parameters for the publish command:\n",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "traces": {
          "title": "Traces command",
          "description": "Use this command to fetch AWS X-Ray traces generated by your stack.\n\n\nRun the following command to fetch X-Ray traces by ID.\n$ sam traces --trace-id tracing-id-1 --trace-id tracing-id-2\n\nRun the following command to tail X-Ray traces as they become available.\n$ sam traces --tail",
          "properties": {
            "parameters": {
              "title": "Parameters for the traces command",
              "description": "Available parameters for the traces command:\n",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "sync": {
          "title": "Sync command",
          "description": "NEW! Sync an AWS SAM Project to AWS.",
          "properties": {
            "parameters": {
              "title": "Parameters for the sync command",
              "description": "Available parameters for the sync command:\n",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "pipeline_bootstrap": {
          "title": "Pipeline Bootstrap command",
          "description": "This command generates the required AWS infrastructure resources to connect to your CI/CD system.\nThis step must be run for each deployment stage in your pipeline, prior to running the sam pipeline init command.",
          "properties": {
            "parameters": {
              "title": "Parameters for the pipeline bootstrap command",
              "description": "Available parameters for the pipeline bootstrap command:\n",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "pipeline_init": {
          "title": "Pipeline Init command",
          "description": "This command generates a pipeline configuration file that your CI/CD system can use to deploy\nserverless applications using AWS SAM.\n\nBefore using sam pipeline init, you must bootstrap the necessary resources for each stage in your pipeline.\nYou can do this by running sam pipeline init --bootstrap to be guided through the setup and configuration\nfile generation process, or refer to resources you have previously created with the sam pipeline bootstrap command.",
          "properties": {
            "parameters": {
              "title": "Parameters for the pipeline init command",
              "description": "Available parameters for the pipeline init command:\n",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "list_resources": {
          "title": "List Resources command",
          "description": "Get a list of resources that will be deployed to CloudFormation.\n\nIf a stack name is provided, the corresponding physical IDs of each\nresource will be mapped to the logical ID of each resource.",
          "properties": {
            "parameters": {
              "title": "Parameters for the list resources command",
              "description": "Available parameters for the list resources command:\n",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "list_stack_outputs": {
          "title": "List Stack Outputs command",
          "description": "Get the stack outputs as defined in the SAM/CloudFormation template.",
          "properties": {
            "parameters": {
              "title": "Parameters for the list stack outputs command",
              "description": "Available parameters for the list stack outputs command:\n",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "list_endpoints": {
          "title": "List Endpoints command",
          "description": "Get a summary of the cloud endpoints in the stack.\n\nThis command will show both the cloud and local endpoints that can\nbe used with sam local and sam sync. Currently the endpoint resources\nare Lambda functions and API Gateway API resources.",
          "properties": {
            "parameters": {
              "title": "Parameters for the list endpoints command",
              "description": "Available parameters for the list endpoints command:\n",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "docs": {
          "title": "Docs command",
          "description": "NEW! Open the documentation in a browser.",
          "properties": {
            "parameters": {
              "title": "Parameters for the docs command",
              "description": "Available parameters for the docs command:\n* ",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        },
        "remote_invoke": {
          "title": "Remote Invoke command",
          "description": "Invoke or send an event to resources in the cloud.",
          "properties": {
            "parameters": {
              "title": "Parameters for the remote invoke command",
              "description": "Available parameters for the remote invoke command:\n",
              "type": "object",
              "properties": {}
            }
          },
          "required": [
            "parameters"
          ]
        }
      }
    }
  }
}