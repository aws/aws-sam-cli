name: Integration Tests

on:
  push:
    branches:
      - integ
  pull_request:
    branches:
      - integ

permissions:
  id-token: write   # Required for OIDC
  contents: read

env:
  AWS_DEFAULT_REGION: us-east-1
  SAM_CLI_DEV: 1
  SAM_CLI_TELEMETRY: 0
  SAM_CLI_CONTAINER_CONNECTION_TIMEOUT: 60
  NODE_VERSION: "18.18.2"
  CARGO_LAMBDA_VERSION: "v0.17.1"
  NOSE_PARAMETERIZED_NO_WARN: 1
  GITHUB_ACTIONS_INTEG: true

jobs:
  build-integ-testing:
    name: Build Integration Testing
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        container_runtime: [docker, finch]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881620123898:role/GitHubActionsAdminRole
          aws-region: us-east-1

      - name: Verify AWS identity
        run: aws sts get-caller-identity

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
          3.9
          3.10
          3.11
          3.12
          3.13

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.19'

      - name: Install Maven 3.9.11
        run: |
          wget https://dlcdn.apache.org/maven/maven-3/3.9.11/binaries/apache-maven-3.9.11-bin.zip -P /tmp
          sudo unzip -d /opt/mvn /tmp/apache-maven-*.zip
          echo "/opt/mvn/apache-maven-3.9.11/bin" >> $GITHUB_PATH

      - name: Install Gradle 9.0.0
        run: |
          wget https://services.gradle.org/distributions/gradle-9.0.0-bin.zip -P /tmp
          sudo unzip -d /opt/gradle /tmp/gradle-*.zip
          echo "/opt/gradle/gradle-9.0.0/bin" >> $GITHUB_PATH

      - name: Install .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Set up Ruby 3.2.7
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.7'

      - name: Set up Ruby 3.3.7
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.7'

      - name: Set up Ruby 3.4.2
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.2'

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL https://sh.rustup.rs | sh -s -- --default-toolchain none -y
          source $HOME/.cargo/env
          rustup toolchain install stable --profile minimal --no-self-update
          rustup default stable
          rustup target add x86_64-unknown-linux-gnu --toolchain stable
          rustup target add aarch64-unknown-linux-gnu --toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install cargo-lambda
        run: pip install cargo-lambda==${{ env.CARGO_LAMBDA_VERSION }}

      - name: Setup Finch runtime
        if: matrix.container_runtime == 'finch'
        run: |
          echo "=== Initializing Finch runtime ==="
          
          # Stop Docker services
          sudo systemctl stop docker || true
          sudo systemctl stop docker.socket || true
          sudo systemctl disable docker || true
          sudo systemctl disable docker.socket || true
          
          # Install Finch GPG key
          for i in {1..3}; do
            if curl -fsSL https://artifact.runfinch.com/deb/GPG_KEY.pub | sudo gpg --dearmor -o /usr/share/keyrings/runfinch-finch-archive-keyring.gpg; then
              break
            fi
            sleep 10
          done
          
          # Add Finch repository
          echo 'deb [signed-by=/usr/share/keyrings/runfinch-finch-archive-keyring.gpg arch=amd64] https://artifact.runfinch.com/deb noble main' | sudo tee /etc/apt/sources.list.d/runfinch-finch.list
          sudo apt update
          
          # Install Finch
          sudo apt install -y runfinch-finch
          
          # Start Finch services
          sudo systemctl enable --now finch
          sudo systemctl enable --now finch-buildkit
          sleep 3
          
          # Set permissions
          sudo chmod 666 /var/run/finch.sock
          
          # Wait for Finch to be ready
          for i in {1..12}; do
            if sudo finch info >/dev/null 2>&1; then
              break
            fi
            sleep 5
          done
          
          # Setup BuildKit sockets
          sudo mkdir -p /run/buildkit-finch /run/buildkit-default /run/buildkit
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-finch/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-default/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit/buildkitd.sock
          sudo chmod 666 /var/lib/finch/buildkit/buildkitd.sock
          sudo chmod 666 /run/buildkit-*/buildkitd.sock
          
          # Setup cross-platform build support
          sudo finch run --privileged --rm tonistiigi/binfmt:master --install all
          
          sudo finch info
          sudo finch version

      - name: Setup Docker runtime
        if: matrix.container_runtime == 'docker'
        run: |
          echo "=== Initializing Docker runtime ==="
          docker info
          docker version

      - name: Setup QEMU for ARM64 emulation
        run: |
          if [ "${{ matrix.container_runtime }}" = "finch" ]; then
            sudo finch run --rm --privileged multiarch/qemu-user-static --reset -p yes
          else
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          fi

      - name: Initialize project
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          make init

      - name: Run build integration tests
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          pytest -vv -n 2 --reruns 3 tests/integration/buildcmd -m 'not java and not python and not provided' --ignore=tests/integration/buildcmd/test_build_cmd_arm64.py --ignore=tests/integration/buildcmd/test_build_terraform_applications.py --ignore=tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd-${{ matrix.container_runtime }}.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-build-integ-${{ matrix.container_runtime }}
          path: TEST_REPORT-*.json

  build-integ-testing-java-python-provided:
    name: Build Integration Testing (Java/Python/Provided)
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        container_runtime: [docker, finch]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881620123898:role/GitHubActionsAdminRole
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
          3.9
          3.10
          3.11
          3.12
          3.13

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.19'

      - name: Install Maven 3.9.11
        run: |
          wget https://dlcdn.apache.org/maven/maven-3/3.9.11/binaries/apache-maven-3.9.11-bin.zip -P /tmp
          sudo unzip -d /opt/mvn /tmp/apache-maven-*.zip
          echo "/opt/mvn/apache-maven-3.9.11/bin" >> $GITHUB_PATH

      - name: Install Gradle 9.0.0
        run: |
          wget https://services.gradle.org/distributions/gradle-9.0.0-bin.zip -P /tmp
          sudo unzip -d /opt/gradle /tmp/gradle-*.zip
          echo "/opt/gradle/gradle-9.0.0/bin" >> $GITHUB_PATH

      - name: Install .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL https://sh.rustup.rs | sh -s -- --default-toolchain none -y
          source $HOME/.cargo/env
          rustup toolchain install stable --profile minimal --no-self-update
          rustup default stable
          rustup target add x86_64-unknown-linux-gnu --toolchain stable
          rustup target add aarch64-unknown-linux-gnu --toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install cargo-lambda
        run: pip install cargo-lambda==${{ env.CARGO_LAMBDA_VERSION }}

      - name: Setup Finch runtime
        if: matrix.container_runtime == 'finch'
        run: |
          echo "=== Initializing Finch runtime ==="
          sudo systemctl stop docker || true
          sudo systemctl stop docker.socket || true
          sudo systemctl disable docker || true
          sudo systemctl disable docker.socket || true
          
          for i in {1..3}; do
            if curl -fsSL https://artifact.runfinch.com/deb/GPG_KEY.pub | sudo gpg --dearmor -o /usr/share/keyrings/runfinch-finch-archive-keyring.gpg; then
              break
            fi
            sleep 10
          done
          
          echo 'deb [signed-by=/usr/share/keyrings/runfinch-finch-archive-keyring.gpg arch=amd64] https://artifact.runfinch.com/deb noble main' | sudo tee /etc/apt/sources.list.d/runfinch-finch.list
          sudo apt update
          sudo apt install -y runfinch-finch
          sudo systemctl enable --now finch
          sudo systemctl enable --now finch-buildkit
          sleep 3
          sudo chmod 666 /var/run/finch.sock
          
          for i in {1..12}; do
            if sudo finch info >/dev/null 2>&1; then
              break
            fi
            sleep 5
          done
          
          sudo mkdir -p /run/buildkit-finch /run/buildkit-default /run/buildkit
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-finch/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-default/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit/buildkitd.sock
          sudo chmod 666 /var/lib/finch/buildkit/buildkitd.sock
          sudo chmod 666 /run/buildkit-*/buildkitd.sock
          sudo finch run --privileged --rm tonistiigi/binfmt:master --install all

      - name: Setup Docker runtime
        if: matrix.container_runtime == 'docker'
        run: |
          docker info
          docker version

      - name: Setup QEMU for ARM64 emulation
        run: |
          if [ "${{ matrix.container_runtime }}" = "finch" ]; then
            sudo finch run --rm --privileged multiarch/qemu-user-static --reset -p yes
          else
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          fi


      - name: Initialize project
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          make init

      - name: Run build integration tests (Java/Python/Provided)
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          pytest -vv -n 2 --reruns 3 tests/integration/buildcmd -m 'java or python or provided' --ignore=tests/integration/buildcmd/test_build_cmd_arm64.py --ignore=tests/integration/buildcmd/test_build_terraform_applications.py --ignore=tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-buildcmd-java-python-provided-${{ matrix.container_runtime }}.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-build-integ-java-python-provided-${{ matrix.container_runtime }}
          path: TEST_REPORT-*.json

  build-integ-testing-arm64:
    name: Build Integration Testing ARM64
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        container_runtime: [docker, finch]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881620123898:role/GitHubActionsAdminRole
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
          3.9
          3.10
          3.11
          3.12
          3.13

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.19'

      - name: Install Maven and Gradle
        run: |
          wget https://dlcdn.apache.org/maven/maven-3/3.9.11/binaries/apache-maven-3.9.11-bin.zip -P /tmp
          sudo unzip -d /opt/mvn /tmp/apache-maven-*.zip
          echo "/opt/mvn/apache-maven-3.9.11/bin" >> $GITHUB_PATH
          wget https://services.gradle.org/distributions/gradle-9.0.0-bin.zip -P /tmp
          sudo unzip -d /opt/gradle /tmp/gradle-*.zip
          echo "/opt/gradle/gradle-9.0.0/bin" >> $GITHUB_PATH

      - name: Install .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Set up Ruby 3.2.7
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.7'

      - name: Set up Ruby 3.3.7
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.7'

      - name: Set up Ruby 3.4.2
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.2'

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL https://sh.rustup.rs | sh -s -- --default-toolchain none -y
          source $HOME/.cargo/env
          rustup toolchain install stable --profile minimal --no-self-update
          rustup default stable
          rustup target add x86_64-unknown-linux-gnu --toolchain stable
          rustup target add aarch64-unknown-linux-gnu --toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install cargo-lambda
        run: pip install cargo-lambda==${{ env.CARGO_LAMBDA_VERSION }}

      - name: Setup Finch runtime
        if: matrix.container_runtime == 'finch'
        run: |
          sudo systemctl stop docker || true
          sudo systemctl stop docker.socket || true
          for i in {1..3}; do
            if curl -fsSL https://artifact.runfinch.com/deb/GPG_KEY.pub | sudo gpg --dearmor -o /usr/share/keyrings/runfinch-finch-archive-keyring.gpg; then
              break
            fi
            sleep 10
          done
          echo 'deb [signed-by=/usr/share/keyrings/runfinch-finch-archive-keyring.gpg arch=amd64] https://artifact.runfinch.com/deb noble main' | sudo tee /etc/apt/sources.list.d/runfinch-finch.list
          sudo apt update
          sudo apt install -y runfinch-finch
          sudo systemctl enable --now finch
          sudo systemctl enable --now finch-buildkit
          sleep 3
          sudo chmod 666 /var/run/finch.sock
          for i in {1..12}; do
            if sudo finch info >/dev/null 2>&1; then
              break
            fi
            sleep 5
          done
          sudo mkdir -p /run/buildkit-finch /run/buildkit-default /run/buildkit
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-finch/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-default/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit/buildkitd.sock
          sudo chmod 666 /var/lib/finch/buildkit/buildkitd.sock
          sudo chmod 666 /run/buildkit-*/buildkitd.sock
          sudo finch run --privileged --rm tonistiigi/binfmt:master --install all

      - name: Setup QEMU for ARM64 emulation
        run: |
          if [ "${{ matrix.container_runtime }}" = "finch" ]; then
            sudo finch run --rm --privileged multiarch/qemu-user-static --reset -p yes
          else
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          fi


      - name: Initialize project
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          make init

      - name: Run ARM64 build integration tests
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          pytest -vv --reruns 3 tests/integration/buildcmd/test_build_cmd_arm64.py -m 'not java' --json-report --json-report-file=TEST_REPORT-integration-buildcmd-arm64-${{ matrix.container_runtime }}.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-build-integ-arm64-${{ matrix.container_runtime }}
          path: TEST_REPORT-*.json

  build-integ-testing-arm64-java:
    name: Build Integration Testing ARM64 Java
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        container_runtime: [docker, finch]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881620123898:role/GitHubActionsAdminRole
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
          3.9
          3.10
          3.11
          3.12
          3.13

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'

      - name: Install Maven and Gradle
        run: |
          wget https://dlcdn.apache.org/maven/maven-3/3.9.11/binaries/apache-maven-3.9.11-bin.zip -P /tmp
          sudo unzip -d /opt/mvn /tmp/apache-maven-*.zip
          echo "/opt/mvn/apache-maven-3.9.11/bin" >> $GITHUB_PATH
          wget https://services.gradle.org/distributions/gradle-9.0.0-bin.zip -P /tmp
          sudo unzip -d /opt/gradle /tmp/gradle-*.zip
          echo "/opt/gradle/gradle-9.0.0/bin" >> $GITHUB_PATH

      - name: Setup Finch runtime
        if: matrix.container_runtime == 'finch'
        run: |
          sudo systemctl stop docker || true
          sudo systemctl stop docker.socket || true
          for i in {1..3}; do
            if curl -fsSL https://artifact.runfinch.com/deb/GPG_KEY.pub | sudo gpg --dearmor -o /usr/share/keyrings/runfinch-finch-archive-keyring.gpg; then
              break
            fi
            sleep 10
          done
          echo 'deb [signed-by=/usr/share/keyrings/runfinch-finch-archive-keyring.gpg arch=amd64] https://artifact.runfinch.com/deb noble main' | sudo tee /etc/apt/sources.list.d/runfinch-finch.list
          sudo apt update
          sudo apt install -y runfinch-finch
          sudo systemctl enable --now finch
          sudo systemctl enable --now finch-buildkit
          sleep 3
          sudo chmod 666 /var/run/finch.sock
          for i in {1..12}; do
            if sudo finch info >/dev/null 2>&1; then
              break
            fi
            sleep 5
          done
          sudo mkdir -p /run/buildkit-finch /run/buildkit-default /run/buildkit
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-finch/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-default/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit/buildkitd.sock
          sudo chmod 666 /var/lib/finch/buildkit/buildkitd.sock
          sudo chmod 666 /run/buildkit-*/buildkitd.sock
          sudo finch run --privileged --rm tonistiigi/binfmt:master --install all

      - name: Setup QEMU for ARM64 emulation
        run: |
          if [ "${{ matrix.container_runtime }}" = "finch" ]; then
            sudo finch run --rm --privileged multiarch/qemu-user-static --reset -p yes
          else
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          fi


      - name: Initialize project
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          make init

      - name: Run ARM64 Java build integration tests
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          pytest -vv --reruns 3 tests/integration/buildcmd/test_build_cmd_arm64.py -m 'java' --json-report --json-report-file=TEST_REPORT-integration-buildcmd-arm64-java-${{ matrix.container_runtime }}.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-build-integ-arm64-java-${{ matrix.container_runtime }}
          path: TEST_REPORT-*.json

  terraform-build-testing:
    name: Terraform Build Testing
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        container_runtime: [docker, finch]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881620123898:role/GitHubActionsAdminRole
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
          3.9
          3.10
          3.11
          3.12
          3.13

      - name: Install Terraform
        run: |
          TER_VER=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d: -f2 | tr -d \"\,\v | awk '{$1=$1};1')
          wget https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_amd64.zip -P /tmp
          sudo unzip -d /opt/terraform /tmp/terraform_${TER_VER}_linux_amd64.zip
          sudo mv /opt/terraform/terraform /usr/local/bin/
          terraform -version

      - name: Setup Finch runtime
        if: matrix.container_runtime == 'finch'
        run: |
          sudo systemctl stop docker || true
          sudo systemctl stop docker.socket || true
          for i in {1..3}; do
            if curl -fsSL https://artifact.runfinch.com/deb/GPG_KEY.pub | sudo gpg --dearmor -o /usr/share/keyrings/runfinch-finch-archive-keyring.gpg; then
              break
            fi
            sleep 10
          done
          echo 'deb [signed-by=/usr/share/keyrings/runfinch-finch-archive-keyring.gpg arch=amd64] https://artifact.runfinch.com/deb noble main' | sudo tee /etc/apt/sources.list.d/runfinch-finch.list
          sudo apt update
          sudo apt install -y runfinch-finch
          sudo systemctl enable --now finch
          sudo systemctl enable --now finch-buildkit
          sleep 3
          sudo chmod 666 /var/run/finch.sock
          for i in {1..12}; do
            if sudo finch info >/dev/null 2>&1; then
              break
            fi
            sleep 5
          done
          sudo mkdir -p /run/buildkit-finch /run/buildkit-default /run/buildkit
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-finch/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-default/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit/buildkitd.sock
          sudo chmod 666 /var/lib/finch/buildkit/buildkitd.sock
          sudo chmod 666 /run/buildkit-*/buildkitd.sock

      - name: Initialize project
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          make init

      - name: Run Terraform build tests
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          pytest -vv -n 4 --reruns 4 tests/integration/buildcmd/test_build_terraform_applications.py tests/integration/buildcmd/test_build_terraform_applications_other_cases.py --json-report --json-report-file=TEST_REPORT-integration-terraform-${{ matrix.container_runtime }}.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-terraform-${{ matrix.container_runtime }}
          path: TEST_REPORT-*.json

  package-delete-deploy-testing:
    name: Package/Delete/Deploy Testing
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        container_runtime: [docker, finch]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881620123898:role/GitHubActionsAdminRole
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
          3.9
          3.10
          3.11
          3.12
          3.13

      - name: Setup Finch runtime
        if: matrix.container_runtime == 'finch'
        run: |
          sudo systemctl stop docker || true
          sudo systemctl stop docker.socket || true
          for i in {1..3}; do
            if curl -fsSL https://artifact.runfinch.com/deb/GPG_KEY.pub | sudo gpg --dearmor -o /usr/share/keyrings/runfinch-finch-archive-keyring.gpg; then
              break
            fi
            sleep 10
          done
          echo 'deb [signed-by=/usr/share/keyrings/runfinch-finch-archive-keyring.gpg arch=amd64] https://artifact.runfinch.com/deb noble main' | sudo tee /etc/apt/sources.list.d/runfinch-finch.list
          sudo apt update
          sudo apt install -y runfinch-finch
          sudo systemctl enable --now finch
          sudo systemctl enable --now finch-buildkit
          sleep 3
          sudo chmod 666 /var/run/finch.sock
          for i in {1..12}; do
            if sudo finch info >/dev/null 2>&1; then
              break
            fi
            sleep 5
          done
          sudo mkdir -p /run/buildkit-finch /run/buildkit-default /run/buildkit
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-finch/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-default/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit/buildkitd.sock
          sudo chmod 666 /var/lib/finch/buildkit/buildkitd.sock
          sudo chmod 666 /run/buildkit-*/buildkitd.sock

      - name: Initialize project
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          make init

      - name: Run package/delete/deploy tests
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          pytest -vv tests/integration/package tests/integration/delete tests/integration/deploy --dist=loadgroup -n 4 --reruns 4 --json-report --json-report-file=TEST_REPORT-integration-package-delete-deploy-${{ matrix.container_runtime }}.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-package-delete-deploy-${{ matrix.container_runtime }}
          path: TEST_REPORT-*.json

  sync-testing:
    name: Sync Testing
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        container_runtime: [docker, finch]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881620123898:role/GitHubActionsAdminRole
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
          3.9
          3.10
          3.11
          3.12
          3.13

      - name: Set up Ruby 3.2.7
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.7'

      - name: Set up Ruby 3.3.7
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.7'

      - name: Set up Ruby 3.4.2
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.2'

      - name: Setup Finch runtime
        if: matrix.container_runtime == 'finch'
        run: |
          sudo systemctl stop docker || true
          sudo systemctl stop docker.socket || true
          for i in {1..3}; do
            if curl -fsSL https://artifact.runfinch.com/deb/GPG_KEY.pub | sudo gpg --dearmor -o /usr/share/keyrings/runfinch-finch-archive-keyring.gpg; then
              break
            fi
            sleep 10
          done
          echo 'deb [signed-by=/usr/share/keyrings/runfinch-finch-archive-keyring.gpg arch=amd64] https://artifact.runfinch.com/deb noble main' | sudo tee /etc/apt/sources.list.d/runfinch-finch.list
          sudo apt update
          sudo apt install -y runfinch-finch
          sudo systemctl enable --now finch
          sudo systemctl enable --now finch-buildkit
          sleep 3
          sudo chmod 666 /var/run/finch.sock
          for i in {1..12}; do
            if sudo finch info >/dev/null 2>&1; then
              break
            fi
            sleep 5
          done
          sudo mkdir -p /run/buildkit-finch /run/buildkit-default /run/buildkit
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-finch/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-default/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit/buildkitd.sock
          sudo chmod 666 /var/lib/finch/buildkit/buildkitd.sock
          sudo chmod 666 /run/buildkit-*/buildkitd.sock

      - name: Initialize project
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          make init

      - name: Run sync tests
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          pytest -vv tests/integration/sync -n 3 --reruns 3 --dist loadscope --json-report --json-report-file=TEST_REPORT-integration-sync-${{ matrix.container_runtime }}.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-sync-${{ matrix.container_runtime }}
          path: TEST_REPORT-*.json

  local-invoke-testing:
    name: Local Invoke Testing
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        container_runtime: [docker, finch]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881620123898:role/GitHubActionsAdminRole
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
          3.9
          3.10
          3.11
          3.12
          3.13

      - name: Install Terraform
        run: |
          TER_VER=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d: -f2 | tr -d \"\,\v | awk '{$1=$1};1')
          wget https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_amd64.zip -P /tmp
          sudo unzip -d /opt/terraform /tmp/terraform_${TER_VER}_linux_amd64.zip
          sudo mv /opt/terraform/terraform /usr/local/bin/
          terraform -version

      - name: Setup Finch runtime
        if: matrix.container_runtime == 'finch'
        run: |
          sudo systemctl stop docker || true
          sudo systemctl stop docker.socket || true
          for i in {1..3}; do
            if curl -fsSL https://artifact.runfinch.com/deb/GPG_KEY.pub | sudo gpg --dearmor -o /usr/share/keyrings/runfinch-finch-archive-keyring.gpg; then
              break
            fi
            sleep 10
          done
          echo 'deb [signed-by=/usr/share/keyrings/runfinch-finch-archive-keyring.gpg arch=amd64] https://artifact.runfinch.com/deb noble main' | sudo tee /etc/apt/sources.list.d/runfinch-finch.list
          sudo apt update
          sudo apt install -y runfinch-finch
          sudo systemctl enable --now finch
          sudo systemctl enable --now finch-buildkit
          sleep 3
          sudo chmod 666 /var/run/finch.sock
          for i in {1..12}; do
            if sudo finch info >/dev/null 2>&1; then
              break
            fi
            sleep 5
          done
          sudo mkdir -p /run/buildkit-finch /run/buildkit-default /run/buildkit
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-finch/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-default/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit/buildkitd.sock
          sudo chmod 666 /var/lib/finch/buildkit/buildkitd.sock
          sudo chmod 666 /run/buildkit-*/buildkitd.sock

      - name: Initialize project
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          make init

      - name: Run local invoke tests
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          pytest -vv --reruns 3 tests/integration/local/invoke tests/integration/local/generate_event --json-report --json-report-file=TEST_REPORT-integration-local-invoke-${{ matrix.container_runtime }}.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-local-invoke-${{ matrix.container_runtime }}
          path: TEST_REPORT-*.json

  local-start-testing:
    name: Local Start Testing
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        container_runtime: [docker, finch]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881620123898:role/GitHubActionsAdminRole
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
          3.9
          3.10
          3.11
          3.12
          3.13

      - name: Install Terraform
        run: |
          TER_VER=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | grep tag_name | cut -d: -f2 | tr -d \"\,\v | awk '{$1=$1};1')
          wget https://releases.hashicorp.com/terraform/${TER_VER}/terraform_${TER_VER}_linux_amd64.zip -P /tmp
          sudo unzip -d /opt/terraform /tmp/terraform_${TER_VER}_linux_amd64.zip
          sudo mv /opt/terraform/terraform /usr/local/bin/
          terraform -version

      - name: Setup Finch runtime
        if: matrix.container_runtime == 'finch'
        run: |
          sudo systemctl stop docker || true
          sudo systemctl stop docker.socket || true
          for i in {1..3}; do
            if curl -fsSL https://artifact.runfinch.com/deb/GPG_KEY.pub | sudo gpg --dearmor -o /usr/share/keyrings/runfinch-finch-archive-keyring.gpg; then
              break
            fi
            sleep 10
          done
          echo 'deb [signed-by=/usr/share/keyrings/runfinch-finch-archive-keyring.gpg arch=amd64] https://artifact.runfinch.com/deb noble main' | sudo tee /etc/apt/sources.list.d/runfinch-finch.list
          sudo apt update
          sudo apt install -y runfinch-finch
          sudo systemctl enable --now finch
          sudo systemctl enable --now finch-buildkit
          sleep 3
          sudo chmod 666 /var/run/finch.sock
          for i in {1..12}; do
            if sudo finch info >/dev/null 2>&1; then
              break
            fi
            sleep 5
          done
          sudo mkdir -p /run/buildkit-finch /run/buildkit-default /run/buildkit
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-finch/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-default/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit/buildkitd.sock
          sudo chmod 666 /var/lib/finch/buildkit/buildkitd.sock
          sudo chmod 666 /run/buildkit-*/buildkitd.sock

      - name: Initialize project
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          make init

      - name: Run local start tests
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          pytest -vv --reruns 3 tests/integration/local/start_api tests/integration/local/start_lambda --json-report --json-report-file=TEST_REPORT-integration-local-start-${{ matrix.container_runtime }}.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-local-start-${{ matrix.container_runtime }}
          path: TEST_REPORT-*.json

  other-and-e2e-testing:
    name: Other and End-to-End Testing
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        container_runtime: [docker, finch]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::881620123898:role/GitHubActionsAdminRole
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: |
          3.9
          3.10
          3.11
          3.12
          3.13

      - name: Set up Ruby 3.2.7
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.7'

      - name: Set up Ruby 3.3.7
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.7'

      - name: Set up Ruby 3.4.2
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4.2'

      - name: Setup Finch runtime
        if: matrix.container_runtime == 'finch'
        run: |
          sudo systemctl stop docker || true
          sudo systemctl stop docker.socket || true
          for i in {1..3}; do
            if curl -fsSL https://artifact.runfinch.com/deb/GPG_KEY.pub | sudo gpg --dearmor -o /usr/share/keyrings/runfinch-finch-archive-keyring.gpg; then
              break
            fi
            sleep 10
          done
          echo 'deb [signed-by=/usr/share/keyrings/runfinch-finch-archive-keyring.gpg arch=amd64] https://artifact.runfinch.com/deb noble main' | sudo tee /etc/apt/sources.list.d/runfinch-finch.list
          sudo apt update
          sudo apt install -y runfinch-finch
          sudo systemctl enable --now finch
          sudo systemctl enable --now finch-buildkit
          sleep 3
          sudo chmod 666 /var/run/finch.sock
          for i in {1..12}; do
            if sudo finch info >/dev/null 2>&1; then
              break
            fi
            sleep 5
          done
          sudo mkdir -p /run/buildkit-finch /run/buildkit-default /run/buildkit
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-finch/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit-default/buildkitd.sock
          sudo ln -sf /var/lib/finch/buildkit/buildkitd.sock /run/buildkit/buildkitd.sock
          sudo chmod 666 /var/lib/finch/buildkit/buildkitd.sock
          sudo chmod 666 /run/buildkit-*/buildkitd.sock

      - name: Initialize project
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          make init

      - name: Run other integration and end-to-end tests
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          pytest -vv -n 4 --reruns 4 --dist loadgroup tests/integration tests/end_to_end --ignore=tests/integration/buildcmd --ignore=tests/integration/delete --ignore=tests/integration/deploy --ignore=tests/integration/package --ignore=tests/integration/sync --ignore=tests/integration/local --json-report --json-report-file=TEST_REPORT-integration-others-${{ matrix.container_runtime }}.json

      - name: Run regression tests
        run: |
          export CONTAINER_RUNTIME=${{ matrix.container_runtime }}
          pytest -vv --reruns 3 tests/regression --json-report --json-report-file=TEST_REPORT-regression-${{ matrix.container_runtime }}.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-other-e2e-${{ matrix.container_runtime }}
          path: TEST_REPORT-*.json
