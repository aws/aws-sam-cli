version: 1.0.{build}
image: Visual Studio 2019
build: off

clone_folder: C:\source

environment:
  AWS_DEFAULT_REGION: us-east-1
  SAM_CLI_DEV: 1
  APPVEYOR_CI_OVERRIDE: 1
  CARGO_LAMBDA_VERSION: "v0.17.1"

  # Python uses $TMPDIR envvar to find root of tempdir
  TMPDIR: '%TEMP%'
  TMP: '%TEMP%'

  # MSI Installers only use Py3.7.6. It is sufficient to test with this version here.
  PYTHON_HOME: "C:\\Python37-x64"
  PYTHON_SCRIPTS: "C:\\Python37-x64\\Scripts"
  PYTHON_EXE: "C:\\Python37-x64\\python.exe"
  PYTHON_ARCH: "64"
  HOME: 'C:\Users\appveyor'
  HOMEDRIVE: "C:"
  HOMEPATH: 'C:\Users\appveyor'
  APPVEYOR_CONSOLE_DISABLE_PTY: true

init:
  # Uncomment this for RDP
  # - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - ps: gcim Win32_Processor | % { "$($_.NumberOfLogicalProcessors) logical CPUs" }
  - ps: gcim Win32_OperatingSystem | % { "$([int]($_.TotalVisibleMemorySize/1mb)) Gb" }

install:
  # install Rust
  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
  - rustup-init.exe -y --default-host x86_64-pc-windows-msvc --default-toolchain stable
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - set RUST_BACKTRACE=1
  - rustup toolchain install stable --profile minimal --no-self-update
  - rustup default stable
  - rustup target add x86_64-unknown-linux-gnu --toolchain stable
  - rustup target add aarch64-unknown-linux-gnu --toolchain stable
  # - ps: Invoke-WebRequest -Uri https://github.com/cargo-lambda/cargo-lambda/releases/download/$env:CARGO_LAMBDA_VERSION/cargo-lambda-$env:CARGO_LAMBDA_VERSION.windows-x64.zip -OutFile C:\Users\appveyor\cargo-lambda.zip
  # - ps: Expand-Archive -DestinationPath C:\Users\appveyor\.cargo\bin C:\Users\appveyor\cargo-lambda.zip
  - ps: irm get.scoop.sh | iex
  - ps: scoop bucket add cargo-lambda https://github.com/cargo-lambda/scoop-cargo-lam
  - ps: scoop install cargo-lambda/cargo-lambda
  - python -V
  - python -m pip install cargo-lambda==%CARGO_LAMBDA_VERSION%
  - rustc -V
  - cargo -V
  - cargo lambda -V

  # Make sure the temp directory exists for Python to use.
  - ps: "mkdir -Force C:\\tmp"
  - "SET PATH=%PYTHON_HOME%;%PATH%"
  - "echo %PYTHON_HOME%"
  - "echo %PATH%"
  - "python --version"

  # Upgrade setuptools, wheel and virtualenv
  - "python -m pip install --upgrade setuptools wheel virtualenv"

  # Create new virtual environment with chosen python version and activate it
  - "python -m virtualenv venv"
  - "venv\\Scripts\\activate"
  - "python --version"

  # Actually install SAM CLI's dependencies
  - 'pip install -e ".[dev]"'

  # Switch to Docker Linux containers
  - ps: Switch-DockerLinux

  # Echo final Path
  - "echo %PATH%"

test_script:
  # Reactivate virtualenv before running tests
  - "venv\\Scripts\\activate"
  - "docker system prune -a -f"
  - ps: "pytest -vv tests/integration/buildcmd/test_build_cmd.py -k TestBuildCommand_Rust"
# Uncomment for RDP
#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
